{"data":{"allMdx":{"edges":[{"node":{"id":"8ad82945-7b42-5096-81dc-af0d205bc8b8","frontmatter":{"order":1,"title":"OCR as a Service","github":"https://github.com/philowaddell/ocr-as-a-service","image":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#283848","images":{"fallback":{"src":"/static/52023c77b1106acdfb87fc6f3ede1ba3/e214f/image.png","srcSet":"/static/52023c77b1106acdfb87fc6f3ede1ba3/05a45/image.png 375w,\n/static/52023c77b1106acdfb87fc6f3ede1ba3/3094e/image.png 750w,\n/static/52023c77b1106acdfb87fc6f3ede1ba3/85dbd/image.png 1080w,\n/static/52023c77b1106acdfb87fc6f3ede1ba3/e3c5a/image.png 1366w,\n/static/52023c77b1106acdfb87fc6f3ede1ba3/f800d/image.png 1920w,\n/static/52023c77b1106acdfb87fc6f3ede1ba3/e214f/image.png 2880w","sizes":"(min-width: 2880px) 2880px, 100vw"},"sources":[{"srcSet":"/static/52023c77b1106acdfb87fc6f3ede1ba3/1f225/image.webp 375w,\n/static/52023c77b1106acdfb87fc6f3ede1ba3/8e70e/image.webp 750w,\n/static/52023c77b1106acdfb87fc6f3ede1ba3/b0691/image.webp 1080w,\n/static/52023c77b1106acdfb87fc6f3ede1ba3/3e17d/image.webp 1366w,\n/static/52023c77b1106acdfb87fc6f3ede1ba3/2f520/image.webp 1920w,\n/static/52023c77b1106acdfb87fc6f3ede1ba3/6544a/image.webp 2880w","type":"image/webp","sizes":"(min-width: 2880px) 2880px, 100vw"}]},"width":2880,"height":1634}}},"image_alt":"","tech":["Python","JavaScript","Docker","RabbitMQ","Pandas"]},"body":"var _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nvar _frontmatter = {\n  \"order\": 1,\n  \"title\": \"OCR as a Service\",\n  \"github\": \"https://github.com/philowaddell/ocr-as-a-service\",\n  \"image\": \"./image.png\",\n  \"image_alt\": \"\",\n  \"tech\": [\"Python\", \"JavaScript\", \"Docker\", \"RabbitMQ\", \"Pandas\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"An OCR as a service platform built using microservice architecture. Each service utilises \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/tesseract-ocr/tesseract\"\n  }, \"Google Tesseract\"), \" and \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://opencv.org/\"\n  }, \"OpenCV\"), \" for image processing and feature extraction. This project taught me a lot about the benefits of message brokers and how message queues can help to coordinate communications in distributed applications.\"));\n}\n;\nMDXContent.isMDXComponent = true;"}},{"node":{"id":"b523b9bd-9b7e-55f6-a583-135a2f4b8895","frontmatter":{"order":0,"title":"Atari Pong with Deep Learning","github":"https://github.com/philowaddell/dqn-pong","image":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#283848","images":{"fallback":{"src":"/static/5989b84de8472f80f9d92fd1509b6411/e214f/image.png","srcSet":"/static/5989b84de8472f80f9d92fd1509b6411/05a45/image.png 375w,\n/static/5989b84de8472f80f9d92fd1509b6411/3094e/image.png 750w,\n/static/5989b84de8472f80f9d92fd1509b6411/85dbd/image.png 1080w,\n/static/5989b84de8472f80f9d92fd1509b6411/e3c5a/image.png 1366w,\n/static/5989b84de8472f80f9d92fd1509b6411/f800d/image.png 1920w,\n/static/5989b84de8472f80f9d92fd1509b6411/e214f/image.png 2880w","sizes":"(min-width: 2880px) 2880px, 100vw"},"sources":[{"srcSet":"/static/5989b84de8472f80f9d92fd1509b6411/1f225/image.webp 375w,\n/static/5989b84de8472f80f9d92fd1509b6411/8e70e/image.webp 750w,\n/static/5989b84de8472f80f9d92fd1509b6411/b0691/image.webp 1080w,\n/static/5989b84de8472f80f9d92fd1509b6411/3e17d/image.webp 1366w,\n/static/5989b84de8472f80f9d92fd1509b6411/2f520/image.webp 1920w,\n/static/5989b84de8472f80f9d92fd1509b6411/6544a/image.webp 2880w","type":"image/webp","sizes":"(min-width: 2880px) 2880px, 100vw"}]},"width":2880,"height":1634}}},"image_alt":"","tech":["Python","PyTorch","Colab","Pickle"]},"body":"var _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nvar _frontmatter = {\n  \"order\": 0,\n  \"title\": \"Atari Pong with Deep Learning\",\n  \"github\": \"https://github.com/philowaddell/dqn-pong\",\n  \"image\": \"./image.png\",\n  \"image_alt\": \"\",\n  \"tech\": [\"Python\", \"PyTorch\", \"Colab\", \"Pickle\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"An implementation of DeepMind's DQN algorithm, which was presented in the 2013 paper: \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://arxiv.org/pdf/1312.5602v1.pdf\"\n  }, \"Playing Atari with Deep Reinforcement Learning\"), \". Both my own and DeepMind's agents achieved an average total reward of 20, when applying an \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://www.baeldung.com/cs/epsilon-greedy-q-learning\"\n  }, \"epsilon-greedy\"), \" policy with epsilon = 0.05; this is equivalent to winning 1-21, on average. Both agents would often concede the first point due to the game starting with the opponents paddle hidden from the player.\"));\n}\n;\nMDXContent.isMDXComponent = true;"}},{"node":{"id":"bf596cd6-21a9-524a-8d04-88ae3864edc4","frontmatter":{"order":2,"title":"Video Classification with Machine Learning","github":"https://github.com/philowaddell/traffic-sim-video-classifer","image":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#283848","images":{"fallback":{"src":"/static/92de1a397ddcbb4fe34b01d3cdb03c3c/e214f/image.png","srcSet":"/static/92de1a397ddcbb4fe34b01d3cdb03c3c/05a45/image.png 375w,\n/static/92de1a397ddcbb4fe34b01d3cdb03c3c/3094e/image.png 750w,\n/static/92de1a397ddcbb4fe34b01d3cdb03c3c/85dbd/image.png 1080w,\n/static/92de1a397ddcbb4fe34b01d3cdb03c3c/e3c5a/image.png 1366w,\n/static/92de1a397ddcbb4fe34b01d3cdb03c3c/f800d/image.png 1920w,\n/static/92de1a397ddcbb4fe34b01d3cdb03c3c/e214f/image.png 2880w","sizes":"(min-width: 2880px) 2880px, 100vw"},"sources":[{"srcSet":"/static/92de1a397ddcbb4fe34b01d3cdb03c3c/1f225/image.webp 375w,\n/static/92de1a397ddcbb4fe34b01d3cdb03c3c/8e70e/image.webp 750w,\n/static/92de1a397ddcbb4fe34b01d3cdb03c3c/b0691/image.webp 1080w,\n/static/92de1a397ddcbb4fe34b01d3cdb03c3c/3e17d/image.webp 1366w,\n/static/92de1a397ddcbb4fe34b01d3cdb03c3c/2f520/image.webp 1920w,\n/static/92de1a397ddcbb4fe34b01d3cdb03c3c/6544a/image.webp 2880w","type":"image/webp","sizes":"(min-width: 2880px) 2880px, 100vw"}]},"width":2880,"height":1634}}},"image_alt":"","tech":["Python","PyTorch","OpenCV","OpenGL"]},"body":"var _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nvar _frontmatter = {\n  \"order\": 2,\n  \"title\": \"Video Classification with Machine Learning\",\n  \"github\": \"https://github.com/philowaddell/traffic-sim-video-classifer\",\n  \"image\": \"./image.png\",\n  \"image_alt\": \"\",\n  \"tech\": [\"Python\", \"PyTorch\", \"OpenCV\", \"OpenGL\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"A \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://docs.google.com/uc?export=download&id=1XYr-Y0uwjLhWIUTqCxRJ_Z-nMgTUCH32\"\n  }, \"motorway traffic violation detection system\"), \" that utilises deep convolutional neural networks to identify undesirable driving behaviours in a dataset of simulated dash cam footage. This also required the implementation of an image processing pipeline that extracted the temporal component of the videos using \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://arxiv.org/pdf/1406.2199.pdf\"\n  }, \"optical flow trajectory stacking\"), \". The network achieved over 90% accuracy when labelling unseen data. The key application of this system is to reduce the amount of time spent by local police forces manually reviewing dash cam footage.\"));\n}\n;\nMDXContent.isMDXComponent = true;"}}]}}}