{"version":3,"file":"9919df9460af8d794527a74dee443a7b0b0b501d-bdc2361578b3a7f78b54.js","mappings":"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","sources":["webpack://philo-waddell-v1/../src/image-utils.ts","webpack://philo-waddell-v1/../src/components/hooks.ts","webpack://philo-waddell-v1/../src/components/layout-wrapper.tsx","webpack://philo-waddell-v1/../src/components/picture.tsx","webpack://philo-waddell-v1/../src/components/placeholder.tsx","webpack://philo-waddell-v1/../src/components/main-image.tsx","webpack://philo-waddell-v1/../src/components/gatsby-image.server.tsx","webpack://philo-waddell-v1/../src/components/gatsby-image.browser.tsx","webpack://philo-waddell-v1/../src/components/static-image.server.tsx","webpack://philo-waddell-v1/../src/components/static-image.tsx","webpack://philo-waddell-v1/./node_modules/gatsby-plugin-image/node_modules/camelcase/index.js","webpack://philo-waddell-v1/./src/hooks/useScrollListener.js","webpack://philo-waddell-v1/./src/hooks/useDeviceDetect.js","webpack://philo-waddell-v1/./src/components/layout.js","webpack://philo-waddell-v1/./src/components/header.js","webpack://philo-waddell-v1/./src/components/nav.js","webpack://philo-waddell-v1/./node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js","webpack://philo-waddell-v1/./node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js","webpack://philo-waddell-v1/./src/templates/section.js","webpack://philo-waddell-v1/./src/templates/image.js","webpack://philo-waddell-v1/./src/templates/content.js","webpack://philo-waddell-v1/./src/components/sections/home/index.js","webpack://philo-waddell-v1/./src/components/sections/about/index.js","webpack://philo-waddell-v1/./src/components/sections/experience/skillbar.js","webpack://philo-waddell-v1/./src/components/sections/experience/index.js","webpack://philo-waddell-v1/./src/components/icons/github.js","webpack://philo-waddell-v1/./src/components/sections/projects/project.js","webpack://philo-waddell-v1/./src/components/sections/projects/index.js","webpack://philo-waddell-v1/./src/components/sections/contact/index.js","webpack://philo-waddell-v1/./src/components/common/resumeButton.js","webpack://philo-waddell-v1/./src/pages/desktop.js"],"sourcesContent":["import camelCase from \"camelcase\"\nimport type { IGatsbyImageData } from \"./index\"\n\nconst DEFAULT_PIXEL_DENSITIES = [0.25, 0.5, 1, 2]\nexport const DEFAULT_BREAKPOINTS = [750, 1080, 1366, 1920]\nexport const EVERY_BREAKPOINT = [\n  320, 654, 768, 1024, 1366, 1600, 1920, 2048, 2560, 3440, 3840, 4096,\n]\nconst DEFAULT_FLUID_WIDTH = 800\nconst DEFAULT_FIXED_WIDTH = 800\nconst DEFAULT_ASPECT_RATIO = 4 / 3\n\nexport type Fit = \"cover\" | \"fill\" | \"inside\" | \"outside\" | \"contain\"\n\nexport type Layout = \"fixed\" | \"fullWidth\" | \"constrained\"\nexport type ImageFormat = \"jpg\" | \"png\" | \"webp\" | \"avif\" | \"auto\" | \"\"\n\n/**\n * The minimal required reporter, as we don't want to import it from gatsby-cli\n */\nexport interface IReporter {\n  warn(message: string): void\n}\n\nexport interface ISharpGatsbyImageArgs {\n  layout?: Layout\n  formats?: Array<ImageFormat>\n  placeholder?: \"tracedSVG\" | \"dominantColor\" | \"blurred\" | \"none\"\n  tracedSVGOptions?: Record<string, unknown>\n  width?: number\n  height?: number\n  aspectRatio?: number\n  sizes?: string\n  quality?: number\n  transformOptions?: {\n    fit?: Fit\n    cropFocus?: number | string\n    duotone?: {\n      highlight: string\n      shadow: string\n      opacity?: number\n    }\n    grayscale?: boolean\n    rotate?: number\n    trim?: number\n  }\n  jpgOptions?: Record<string, unknown>\n  pngOptions?: Record<string, unknown>\n  webpOptions?: Record<string, unknown>\n  avifOptions?: Record<string, unknown>\n  blurredOptions?: { width?: number; toFormat?: ImageFormat }\n  breakpoints?: Array<number>\n  outputPixelDensities?: Array<number>\n  backgroundColor?: string\n}\n\nexport interface IImageSizeArgs {\n  width?: number\n  height?: number\n  layout?: Layout\n  filename: string\n  outputPixelDensities?: Array<number>\n  breakpoints?: Array<number>\n  fit?: Fit\n  reporter?: IReporter\n  sourceMetadata: { width: number; height: number }\n}\n\nexport interface IImageSizes {\n  sizes: Array<number>\n  presentationWidth: number\n  presentationHeight: number\n  aspectRatio: number\n  unscaledWidth: number\n}\n\nexport interface IImage {\n  src: string\n  width: number\n  height: number\n  format: ImageFormat\n}\n\nexport interface IGatsbyImageHelperArgs {\n  pluginName: string\n  generateImageSource: (\n    filename: string,\n    width: number,\n    height: number,\n    format: ImageFormat,\n    fit?: Fit,\n    options?: Record<string, unknown>\n  ) => IImage\n  layout?: Layout\n  formats?: Array<ImageFormat>\n  filename: string\n  placeholderURL?: string\n  width?: number\n  height?: number\n  sizes?: string\n  reporter?: IReporter\n  sourceMetadata?: { width: number; height: number; format: ImageFormat }\n  fit?: Fit\n  options?: Record<string, unknown>\n  breakpoints?: Array<number>\n  backgroundColor?: string\n  aspectRatio?: number\n}\n\nconst warn = (message: string): void => console.warn(message)\n\nconst sortNumeric = (a: number, b: number): number => a - b\n\nexport const getSizes = (width: number, layout: Layout): string | undefined => {\n  switch (layout) {\n    // If screen is wider than the max size, image width is the max size,\n    // otherwise it's the width of the screen\n    case `constrained`:\n      return `(min-width: ${width}px) ${width}px, 100vw`\n\n    // Image is always the same width, whatever the size of the screen\n    case `fixed`:\n      return `${width}px`\n\n    // Image is always the width of the screen\n    case `fullWidth`:\n      return `100vw`\n\n    default:\n      return undefined\n  }\n}\n\nexport const getSrcSet = (images: Array<IImage>): string =>\n  images.map(image => `${image.src} ${image.width}w`).join(`,\\n`)\n\nexport function formatFromFilename(filename: string): ImageFormat | undefined {\n  const dot = filename.lastIndexOf(`.`)\n  if (dot !== -1) {\n    const ext = filename.slice(dot + 1)\n    if (ext === `jpeg`) {\n      return `jpg`\n    }\n    if (ext.length === 3 || ext.length === 4) {\n      return ext as ImageFormat\n    }\n  }\n  return undefined\n}\n\nexport function setDefaultDimensions(\n  args: IGatsbyImageHelperArgs\n): IGatsbyImageHelperArgs {\n  let {\n    layout = `constrained`,\n    width,\n    height,\n    sourceMetadata,\n    breakpoints,\n    aspectRatio,\n    formats = [`auto`, `webp`],\n  } = args\n  formats = formats.map(format => format.toLowerCase() as ImageFormat)\n  layout = camelCase(layout) as Layout\n\n  if (width && height) {\n    return { ...args, formats, layout, aspectRatio: width / height }\n  }\n  if (sourceMetadata.width && sourceMetadata.height && !aspectRatio) {\n    aspectRatio = sourceMetadata.width / sourceMetadata.height\n  }\n\n  if (layout === `fullWidth`) {\n    width = width || sourceMetadata.width || breakpoints[breakpoints.length - 1]\n    height = height || Math.round(width / (aspectRatio || DEFAULT_ASPECT_RATIO))\n  } else {\n    if (!width) {\n      if (height && aspectRatio) {\n        width = height * aspectRatio\n      } else if (sourceMetadata.width) {\n        width = sourceMetadata.width\n      } else if (height) {\n        width = Math.round(height / DEFAULT_ASPECT_RATIO)\n      } else {\n        width = DEFAULT_FIXED_WIDTH\n      }\n    }\n\n    if (aspectRatio && !height) {\n      height = Math.round(width / aspectRatio)\n    } else if (!aspectRatio) {\n      aspectRatio = width / height\n    }\n  }\n  return { ...args, width, height, aspectRatio, layout, formats }\n}\n\n/**\n * Use this for getting an image for the blurred placeholder. This ensures the\n * aspect ratio and crop match the main image\n */\nexport function getLowResolutionImageURL(\n  args: IGatsbyImageHelperArgs,\n  width = 20\n): string {\n  args = setDefaultDimensions(args)\n  const { generateImageSource, filename, aspectRatio } = args\n  return generateImageSource(\n    filename,\n    width,\n    Math.round(width / aspectRatio),\n    args.sourceMetadata.format || `jpg`,\n    args.fit,\n    args.options\n  )?.src\n}\n\nexport function generateImageData(\n  args: IGatsbyImageHelperArgs\n): IGatsbyImageData {\n  args = setDefaultDimensions(args)\n\n  let {\n    pluginName,\n    sourceMetadata,\n    generateImageSource,\n    layout,\n    fit,\n    options,\n    width,\n    height,\n    filename,\n    reporter = { warn },\n    backgroundColor,\n    placeholderURL,\n  } = args\n\n  if (!pluginName) {\n    reporter.warn(\n      `[gatsby-plugin-image] \"generateImageData\" was not passed a plugin name`\n    )\n  }\n\n  if (typeof generateImageSource !== `function`) {\n    throw new Error(`generateImageSource must be a function`)\n  }\n\n  if (!sourceMetadata || (!sourceMetadata.width && !sourceMetadata.height)) {\n    // No metadata means we let the CDN handle max size etc, aspect ratio etc\n    sourceMetadata = {\n      width,\n      height,\n      format: sourceMetadata?.format || formatFromFilename(filename) || `auto`,\n    }\n  } else if (!sourceMetadata.format) {\n    sourceMetadata.format = formatFromFilename(filename)\n  }\n\n  const formats = new Set<ImageFormat>(args.formats)\n\n  if (formats.size === 0 || formats.has(`auto`) || formats.has(``)) {\n    formats.delete(`auto`)\n    formats.delete(``)\n    formats.add(sourceMetadata.format)\n  }\n\n  if (formats.has(`jpg`) && formats.has(`png`)) {\n    reporter.warn(\n      `[${pluginName}] Specifying both 'jpg' and 'png' formats is not supported. Using 'auto' instead`\n    )\n    if (sourceMetadata.format === `jpg`) {\n      formats.delete(`png`)\n    } else {\n      formats.delete(`jpg`)\n    }\n  }\n\n  const imageSizes = calculateImageSizes({ ...args, sourceMetadata })\n\n  const result: IGatsbyImageData[\"images\"] = {\n    sources: [],\n  }\n\n  let sizes = args.sizes\n  if (!sizes) {\n    sizes = getSizes(imageSizes.presentationWidth, layout)\n  }\n\n  formats.forEach(format => {\n    const images = imageSizes.sizes\n      .map(size => {\n        const imageSrc = generateImageSource(\n          filename,\n          size,\n          Math.round(size / imageSizes.aspectRatio),\n          format,\n          fit,\n          options\n        )\n        if (\n          !imageSrc?.width ||\n          !imageSrc.height ||\n          !imageSrc.src ||\n          !imageSrc.format\n        ) {\n          reporter.warn(\n            `[${pluginName}] The resolver for image ${filename} returned an invalid value.`\n          )\n          return undefined\n        }\n        return imageSrc\n      })\n      .filter(Boolean)\n\n    if (format === `jpg` || format === `png` || format === `auto`) {\n      const unscaled =\n        images.find(img => img.width === imageSizes.unscaledWidth) || images[0]\n\n      if (unscaled) {\n        result.fallback = {\n          src: unscaled.src,\n          srcSet: getSrcSet(images),\n          sizes,\n        }\n      }\n    } else {\n      result.sources?.push({\n        srcSet: getSrcSet(images),\n        sizes,\n        type: `image/${format}`,\n      })\n    }\n  })\n\n  const imageProps: Partial<IGatsbyImageData> = {\n    images: result,\n    layout,\n    backgroundColor,\n  }\n\n  if (placeholderURL) {\n    imageProps.placeholder = { fallback: placeholderURL }\n  }\n\n  switch (layout) {\n    case `fixed`:\n      imageProps.width = imageSizes.presentationWidth\n      imageProps.height = imageSizes.presentationHeight\n      break\n\n    case `fullWidth`:\n      imageProps.width = 1\n      imageProps.height = 1 / imageSizes.aspectRatio\n      break\n\n    case `constrained`:\n      imageProps.width = args.width || imageSizes.presentationWidth || 1\n      imageProps.height = (imageProps.width || 1) / imageSizes.aspectRatio\n  }\n\n  return imageProps as IGatsbyImageData\n}\n\nconst dedupeAndSortDensities = (values: Array<number>): Array<number> =>\n  Array.from(new Set([1, ...values])).sort(sortNumeric)\n\nexport function calculateImageSizes(args: IImageSizeArgs): IImageSizes {\n  const {\n    width,\n    height,\n    filename,\n    layout = `constrained`,\n    sourceMetadata: imgDimensions,\n    reporter = { warn },\n    breakpoints = DEFAULT_BREAKPOINTS,\n  } = args\n\n  // check that all dimensions provided are positive\n  const userDimensions = { width, height }\n  const erroneousUserDimensions = Object.entries(userDimensions).filter(\n    ([_, size]) => typeof size === `number` && size < 1\n  )\n  if (erroneousUserDimensions.length) {\n    throw new Error(\n      `Specified dimensions for images must be positive numbers (> 0). Problem dimensions you have are ${erroneousUserDimensions\n        .map(dim => dim.join(`: `))\n        .join(`, `)}`\n    )\n  }\n\n  if (layout === `fixed`) {\n    return fixedImageSizes(args)\n  } else if (layout === `constrained`) {\n    return responsiveImageSizes(args)\n  } else if (layout === `fullWidth`) {\n    return responsiveImageSizes({ breakpoints, ...args })\n  } else {\n    reporter.warn(\n      `No valid layout was provided for the image at ${filename}. Valid image layouts are fixed, fullWidth, and constrained. Found ${layout}`\n    )\n    return {\n      sizes: [imgDimensions.width],\n      presentationWidth: imgDimensions.width,\n      presentationHeight: imgDimensions.height,\n      aspectRatio: imgDimensions.width / imgDimensions.height,\n      unscaledWidth: imgDimensions.width,\n    }\n  }\n}\nexport function fixedImageSizes({\n  filename,\n  sourceMetadata: imgDimensions,\n  width,\n  height,\n  fit = `cover`,\n  outputPixelDensities = DEFAULT_PIXEL_DENSITIES,\n  reporter = { warn },\n}: IImageSizeArgs): IImageSizes {\n  let aspectRatio = imgDimensions.width / imgDimensions.height\n  // Sort, dedupe and ensure there's a 1\n  const densities = dedupeAndSortDensities(outputPixelDensities)\n\n  // If both are provided then we need to check the fit\n  if (width && height) {\n    const calculated = getDimensionsAndAspectRatio(imgDimensions, {\n      width,\n      height,\n      fit,\n    })\n    width = calculated.width\n    height = calculated.height\n    aspectRatio = calculated.aspectRatio\n  }\n\n  if (!width) {\n    if (!height) {\n      width = DEFAULT_FIXED_WIDTH\n    } else {\n      width = Math.round(height * aspectRatio)\n    }\n  } else if (!height) {\n    height = Math.round(width / aspectRatio)\n  }\n\n  const originalWidth = width // will use this for presentationWidth, don't want to lose it\n  const isTopSizeOverriden =\n    imgDimensions.width < width || imgDimensions.height < (height as number)\n\n  // If the image is smaller than requested, warn the user that it's being processed as such\n  // print out this message with the necessary information before we overwrite it for sizing\n  if (isTopSizeOverriden) {\n    const fixedDimension = imgDimensions.width < width ? `width` : `height`\n    reporter.warn(`\nThe requested ${fixedDimension} \"${\n      fixedDimension === `width` ? width : height\n    }px\" for the image ${filename} was larger than the actual image ${fixedDimension} of ${\n      imgDimensions[fixedDimension]\n    }px. If possible, replace the current image with a larger one.`)\n\n    if (fixedDimension === `width`) {\n      width = imgDimensions.width\n      height = Math.round(width / aspectRatio)\n    } else {\n      height = imgDimensions.height\n      width = height * aspectRatio\n    }\n  }\n\n  const sizes = densities\n    .filter(size => size >= 1) // remove smaller densities because fixed images don't need them\n    .map(density => Math.round(density * (width as number)))\n    .filter(size => size <= imgDimensions.width)\n\n  return {\n    sizes,\n    aspectRatio,\n    presentationWidth: originalWidth,\n    presentationHeight: Math.round(originalWidth / aspectRatio),\n    unscaledWidth: width,\n  }\n}\n\nexport function responsiveImageSizes({\n  sourceMetadata: imgDimensions,\n  width,\n  height,\n  fit = `cover`,\n  outputPixelDensities = DEFAULT_PIXEL_DENSITIES,\n  breakpoints,\n  layout,\n}: IImageSizeArgs): IImageSizes {\n  let sizes\n  let aspectRatio = imgDimensions.width / imgDimensions.height\n  // Sort, dedupe and ensure there's a 1\n  const densities = dedupeAndSortDensities(outputPixelDensities)\n\n  // If both are provided then we need to check the fit\n  if (width && height) {\n    const calculated = getDimensionsAndAspectRatio(imgDimensions, {\n      width,\n      height,\n      fit,\n    })\n    width = calculated.width\n    height = calculated.height\n    aspectRatio = calculated.aspectRatio\n  }\n\n  // Case 1: width of height were passed in, make sure it isn't larger than the actual image\n  width = width && Math.min(width, imgDimensions.width)\n  height = height && Math.min(height, imgDimensions.height)\n\n  // Case 2: neither width or height were passed in, use default size\n  if (!width && !height) {\n    width = Math.min(DEFAULT_FLUID_WIDTH, imgDimensions.width)\n    height = width / aspectRatio\n  }\n\n  // if it still hasn't been found, calculate width from the derived height.\n  // TS isn't smart enough to realise the type for height has been narrowed here\n  if (!width) {\n    width = (height as number) * aspectRatio\n  }\n\n  const originalWidth = width\n  const isTopSizeOverriden =\n    imgDimensions.width < width || imgDimensions.height < (height as number)\n  if (isTopSizeOverriden) {\n    width = imgDimensions.width\n    height = imgDimensions.height\n  }\n\n  width = Math.round(width)\n\n  if (breakpoints?.length > 0) {\n    sizes = breakpoints.filter(size => size <= imgDimensions.width)\n\n    // If a larger breakpoint has been filtered-out, add the actual image width instead\n    if (\n      sizes.length < breakpoints.length &&\n      !sizes.includes(imgDimensions.width)\n    ) {\n      sizes.push(imgDimensions.width)\n    }\n  } else {\n    sizes = densities.map(density => Math.round(density * (width as number)))\n    sizes = sizes.filter(size => size <= imgDimensions.width)\n  }\n\n  // ensure that the size passed in is included in the final output\n  if (layout === `constrained` && !sizes.includes(width)) {\n    sizes.push(width)\n  }\n  sizes = sizes.sort(sortNumeric)\n  return {\n    sizes,\n    aspectRatio,\n    presentationWidth: originalWidth,\n    presentationHeight: Math.round(originalWidth / aspectRatio),\n    unscaledWidth: width,\n  }\n}\n\nexport function getDimensionsAndAspectRatio(\n  dimensions,\n  options\n): { width: number; height: number; aspectRatio: number } {\n  // Calculate the eventual width/height of the image.\n  const imageAspectRatio = dimensions.width / dimensions.height\n\n  let width = options.width\n  let height = options.height\n\n  switch (options.fit) {\n    case `fill`: {\n      width = options.width ? options.width : dimensions.width\n      height = options.height ? options.height : dimensions.height\n      break\n    }\n    case `inside`: {\n      const widthOption = options.width\n        ? options.width\n        : Number.MAX_SAFE_INTEGER\n      const heightOption = options.height\n        ? options.height\n        : Number.MAX_SAFE_INTEGER\n\n      width = Math.min(widthOption, Math.round(heightOption * imageAspectRatio))\n      height = Math.min(\n        heightOption,\n        Math.round(widthOption / imageAspectRatio)\n      )\n      break\n    }\n    case `outside`: {\n      const widthOption = options.width ? options.width : 0\n      const heightOption = options.height ? options.height : 0\n\n      width = Math.max(widthOption, Math.round(heightOption * imageAspectRatio))\n      height = Math.max(\n        heightOption,\n        Math.round(widthOption / imageAspectRatio)\n      )\n      break\n    }\n\n    default: {\n      if (options.width && !options.height) {\n        width = options.width\n        height = Math.round(options.width / imageAspectRatio)\n      }\n\n      if (options.height && !options.width) {\n        width = Math.round(options.height * imageAspectRatio)\n        height = options.height\n      }\n    }\n  }\n\n  return {\n    width,\n    height,\n    aspectRatio: width / height,\n  }\n}\n","/* global GATSBY___IMAGE */\nimport { generateImageData, EVERY_BREAKPOINT } from \"../image-utils\"\nimport type { CSSProperties, HTMLAttributes, ImgHTMLAttributes } from \"react\"\nimport type { Node } from \"gatsby\"\nimport type { PlaceholderProps } from \"./placeholder\"\nimport type { MainImageProps } from \"./main-image\"\nimport type { IGatsbyImageData } from \"./gatsby-image.browser\"\nimport type {\n  IGatsbyImageHelperArgs,\n  Layout,\n  IImage,\n  ImageFormat,\n} from \"../image-utils\"\n\n// Native lazy-loading support: https://addyosmani.com/blog/lazy-loading/\nexport const hasNativeLazyLoadSupport = (): boolean =>\n  typeof HTMLImageElement !== `undefined` &&\n  `loading` in HTMLImageElement.prototype\n\nexport function gatsbyImageIsInstalled(): boolean {\n  return typeof GATSBY___IMAGE !== `undefined` && GATSBY___IMAGE\n}\n\nexport type IGatsbyImageDataParent<T = never> = T & {\n  gatsbyImageData: IGatsbyImageData\n}\nexport type IGatsbyImageParent<T = never> = T & {\n  gatsbyImage: IGatsbyImageData\n}\nexport type FileNode = Partial<Node> & {\n  childImageSharp?: IGatsbyImageDataParent<Partial<Node>>\n}\n\nconst isGatsbyImageData = (\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  node: IGatsbyImageData | any\n): node is IGatsbyImageData =>\n  // 🦆 check for a deep prop to be sure this is a valid gatsbyImageData object\n  Boolean(node?.images?.fallback?.src)\n\nconst isGatsbyImageDataParent = <T>(\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  node: IGatsbyImageDataParent<T> | any\n): node is IGatsbyImageDataParent<T> => Boolean(node?.gatsbyImageData)\n\nconst isGatsbyImageParent = <T>(\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  node: IGatsbyImageParent<T> | any\n): node is IGatsbyImageParent<T> => Boolean(node?.gatsbyImage)\n\nexport type ImageDataLike =\n  | FileNode\n  | IGatsbyImageDataParent\n  | IGatsbyImageParent\n  | IGatsbyImageData\n\nexport const getImage = (\n  node: ImageDataLike | null\n): IGatsbyImageData | undefined => {\n  // This checks both for gatsbyImageData and gatsbyImage\n  if (isGatsbyImageData(node)) {\n    return node\n  }\n  // gatsbyImageData GraphQL field\n  if (isGatsbyImageDataParent(node)) {\n    return node.gatsbyImageData\n  }\n  // gatsbyImage GraphQL field for Gatsby's Image CDN service\n  if (isGatsbyImageParent(node)) {\n    return node.gatsbyImage\n  }\n  return node?.childImageSharp?.gatsbyImageData\n}\n\nexport const getSrc = (node: ImageDataLike): string | undefined =>\n  getImage(node)?.images?.fallback?.src\n\nexport const getSrcSet = (node: ImageDataLike): string | undefined =>\n  getImage(node)?.images?.fallback?.srcSet\n\nexport function getWrapperProps(\n  width: number,\n  height: number,\n  layout: Layout\n): Pick<HTMLAttributes<HTMLElement>, \"className\" | \"style\"> & {\n  \"data-gatsby-image-wrapper\": string\n} {\n  const wrapperStyle: CSSProperties = {}\n\n  let className = `gatsby-image-wrapper`\n\n  // If the plugin isn't installed we need to apply the styles inline\n  if (!gatsbyImageIsInstalled()) {\n    wrapperStyle.position = `relative`\n    wrapperStyle.overflow = `hidden`\n  }\n\n  if (layout === `fixed`) {\n    wrapperStyle.width = width\n    wrapperStyle.height = height\n  } else if (layout === `constrained`) {\n    if (!gatsbyImageIsInstalled()) {\n      wrapperStyle.display = `inline-block`\n      wrapperStyle.verticalAlign = `top`\n    }\n    className = `gatsby-image-wrapper gatsby-image-wrapper-constrained`\n  }\n\n  return {\n    className,\n    \"data-gatsby-image-wrapper\": ``,\n    style: wrapperStyle,\n  }\n}\n\nexport interface IUrlBuilderArgs<OptionsType> {\n  width: number\n  height: number\n  baseUrl: string\n  format: ImageFormat\n  options: OptionsType\n}\nexport interface IGetImageDataArgs<OptionsType = Record<string, unknown>> {\n  baseUrl: string\n  /**\n   * For constrained and fixed images, the size of the image element\n   */\n  width?: number\n  height?: number\n  /**\n   * If available, pass the source image width and height\n   */\n  sourceWidth?: number\n  sourceHeight?: number\n  /**\n   * If only one dimension is passed, then this will be used to calculate the other.\n   */\n  aspectRatio?: number\n  layout?: Layout\n  /**\n   * Returns a URL based on the passed arguments. Should be a pure function\n   */\n  urlBuilder: (args: IUrlBuilderArgs<OptionsType>) => string\n\n  /**\n   * Should be a data URI\n   */\n  placeholderURL?: string\n  backgroundColor?: string\n  /**\n   * Used in error messages etc\n   */\n  pluginName?: string\n\n  /**\n   * If you do not support auto-format, pass an array of image types here\n   */\n  formats?: Array<ImageFormat>\n\n  breakpoints?: Array<number>\n\n  /**\n   * Passed to the urlBuilder function\n   */\n  options?: OptionsType\n}\n\n/**\n * Use this hook to generate gatsby-plugin-image data in the browser.\n */\nexport function getImageData<OptionsType>({\n  baseUrl,\n  urlBuilder,\n  sourceWidth,\n  sourceHeight,\n  pluginName = `getImageData`,\n  formats = [`auto`],\n  breakpoints,\n  options,\n  ...props\n}: IGetImageDataArgs<OptionsType>): IGatsbyImageData {\n  if (\n    !breakpoints?.length &&\n    (props.layout === `fullWidth` || (props.layout as string) === `FULL_WIDTH`)\n  ) {\n    breakpoints = EVERY_BREAKPOINT\n  }\n  const generateImageSource = (\n    baseUrl: string,\n    width: number,\n    height?: number,\n    format?: ImageFormat\n  ): IImage => {\n    return {\n      width,\n      height,\n      format,\n      src: urlBuilder({ baseUrl, width, height, options, format }),\n    }\n  }\n\n  const sourceMetadata: IGatsbyImageHelperArgs[\"sourceMetadata\"] = {\n    width: sourceWidth,\n    height: sourceHeight,\n    format: `auto`,\n  }\n\n  const args: IGatsbyImageHelperArgs = {\n    ...props,\n    pluginName,\n    generateImageSource,\n    filename: baseUrl,\n    formats,\n    breakpoints,\n    sourceMetadata,\n  }\n  return generateImageData(args)\n}\n\nexport function getMainProps(\n  isLoading: boolean,\n  isLoaded: boolean,\n  images: IGatsbyImageData[\"images\"],\n  loading?: \"eager\" | \"lazy\",\n  style: CSSProperties = {}\n): Partial<MainImageProps> {\n  // fallback when it's not configured in gatsby-config.\n  if (!gatsbyImageIsInstalled()) {\n    style = {\n      height: `100%`,\n      left: 0,\n      position: `absolute`,\n      top: 0,\n      transform: `translateZ(0)`,\n      transition: `opacity 250ms linear`,\n      width: `100%`,\n      willChange: `opacity`,\n      ...style,\n    }\n  }\n\n  const result = {\n    ...images,\n    loading,\n    shouldLoad: isLoading,\n    \"data-main-image\": ``,\n    style: {\n      ...style,\n      opacity: isLoaded ? 1 : 0,\n    },\n  }\n\n  return result\n}\n\nexport type PlaceholderImageAttrs = ImgHTMLAttributes<HTMLImageElement> &\n  Pick<PlaceholderProps, \"sources\" | \"fallback\"> & {\n    \"data-placeholder-image\"?: string\n  }\n\nexport function getPlaceholderProps(\n  placeholder: PlaceholderImageAttrs | undefined,\n  isLoaded: boolean,\n  layout: Layout,\n  width?: number,\n  height?: number,\n  backgroundColor?: string,\n  objectFit?: CSSProperties[\"objectFit\"],\n  objectPosition?: CSSProperties[\"objectPosition\"]\n): PlaceholderImageAttrs {\n  const wrapperStyle: CSSProperties = {}\n\n  if (backgroundColor) {\n    wrapperStyle.backgroundColor = backgroundColor\n\n    if (layout === `fixed`) {\n      wrapperStyle.width = width\n      wrapperStyle.height = height\n      wrapperStyle.backgroundColor = backgroundColor\n      wrapperStyle.position = `relative`\n    } else if (layout === `constrained`) {\n      wrapperStyle.position = `absolute`\n      wrapperStyle.top = 0\n      wrapperStyle.left = 0\n      wrapperStyle.bottom = 0\n      wrapperStyle.right = 0\n    } else if (layout === `fullWidth`) {\n      wrapperStyle.position = `absolute`\n      wrapperStyle.top = 0\n      wrapperStyle.left = 0\n      wrapperStyle.bottom = 0\n      wrapperStyle.right = 0\n    }\n  }\n\n  if (objectFit) {\n    wrapperStyle.objectFit = objectFit\n  }\n\n  if (objectPosition) {\n    wrapperStyle.objectPosition = objectPosition\n  }\n  const result: PlaceholderImageAttrs = {\n    ...placeholder,\n    \"aria-hidden\": true,\n    \"data-placeholder-image\": ``,\n    style: {\n      opacity: isLoaded ? 0 : 1,\n      transition: `opacity 500ms linear`,\n      ...wrapperStyle,\n    },\n  }\n\n  // fallback when it's not configured in gatsby-config.\n  if (!gatsbyImageIsInstalled()) {\n    result.style = {\n      height: `100%`,\n      left: 0,\n      position: `absolute`,\n      top: 0,\n      width: `100%`,\n    }\n  }\n\n  return result\n}\n\nexport interface IArtDirectedImage {\n  media: string\n  image: IGatsbyImageData\n}\n\n/**\n * Generate a Gatsby image data object with multiple, art-directed images that display at different\n * resolutions.\n *\n * @param defaultImage The image displayed when no media query matches.\n * It is also used for all other settings applied to the image, such as width, height and layout.\n * You should pass a className to the component with media queries to adjust the size of the container,\n * as this cannot be adjusted automatically.\n * @param artDirected Array of objects which each contains a `media` string which is a media query\n * such as `(min-width: 320px)`, and the image object to use when that query matches.\n */\nexport function withArtDirection(\n  defaultImage: IGatsbyImageData,\n  artDirected: Array<IArtDirectedImage>\n): IGatsbyImageData {\n  const { images, placeholder, ...props } = defaultImage\n  const output: IGatsbyImageData = {\n    ...props,\n    images: {\n      ...images,\n      sources: [],\n    },\n    placeholder: placeholder && {\n      ...placeholder,\n      sources: [],\n    },\n  }\n\n  artDirected.forEach(({ media, image }) => {\n    if (!media) {\n      if (process.env.NODE_ENV === `development`) {\n        console.warn(\n          \"[gatsby-plugin-image] All art-directed images passed to must have a value set for `media`. Skipping.\"\n        )\n      }\n      return\n    }\n\n    if (\n      image.layout !== defaultImage.layout &&\n      process.env.NODE_ENV === `development`\n    ) {\n      console.warn(\n        `[gatsby-plugin-image] Mismatched image layout: expected \"${defaultImage.layout}\" but received \"${image.layout}\". All art-directed images use the same layout as the default image`\n      )\n    }\n\n    output.images.sources.push(\n      ...image.images.sources.map(source => {\n        return { ...source, media }\n      }),\n      {\n        media,\n        srcSet: image.images.fallback.srcSet,\n      }\n    )\n\n    if (!output.placeholder) {\n      return\n    }\n\n    output.placeholder.sources.push({\n      media,\n      srcSet: image.placeholder.fallback,\n    })\n  })\n  output.images.sources.push(...images.sources)\n  if (placeholder?.sources) {\n    output.placeholder?.sources.push(...placeholder.sources)\n  }\n  return output\n}\n","import React, { Fragment, FunctionComponent } from \"react\"\nimport terserMacro from \"../../macros/terser.macro\"\nimport { Layout } from \"../image-utils\"\n\nexport interface ILayoutWrapperProps {\n  layout: Layout\n  width: number\n  height: number\n}\n\nconst NativeScriptLoading: FunctionComponent = () => (\n  <script\n    type=\"module\"\n    dangerouslySetInnerHTML={{\n      __html: terserMacro`\nconst hasNativeLazyLoadSupport = typeof HTMLImageElement !== \"undefined\" && \"loading\" in HTMLImageElement.prototype;\nif (hasNativeLazyLoadSupport) {\n  const gatsbyImages = document.querySelectorAll('img[data-main-image]');\n  for (let mainImage of gatsbyImages) {\n    if (mainImage.dataset.src) {\n      mainImage.setAttribute('src', mainImage.dataset.src)\n      mainImage.removeAttribute('data-src')\n    }\n    if (mainImage.dataset.srcset) {\n      mainImage.setAttribute('srcset', mainImage.dataset.srcset)\n      mainImage.removeAttribute('data-srcset')\n    }\n\n    const sources = mainImage.parentNode.querySelectorAll('source[data-srcset]');\n    for (let source of sources) {\n      source.setAttribute('srcset', source.dataset.srcset)\n      source.removeAttribute('data-srcset')\n    }\n\n    if (mainImage.complete) {\n      mainImage.style.opacity = 1;\n\n      // also hide the placeholder\n      mainImage.parentNode.parentNode.querySelector('[data-placeholder-image]').style.opacity = 0;\n    }\n  }\n}\n`,\n    }}\n  />\n)\n\nexport function getSizer(\n  layout: Layout,\n  width: number,\n  height: number\n): string {\n  let sizer = ``\n  if (layout === `fullWidth`) {\n    sizer = `<div aria-hidden=\"true\" style=\"padding-top: ${\n      (height / width) * 100\n    }%;\"></div>`\n  }\n\n  if (layout === `constrained`) {\n    sizer = `<div style=\"max-width: ${width}px; display: block;\"><img alt=\"\" role=\"presentation\" aria-hidden=\"true\" src=\"data:image/svg+xml;charset=utf-8,%3Csvg height='${height}' width='${width}' xmlns='http://www.w3.org/2000/svg' version='1.1'%3E%3C/svg%3E\" style=\"max-width: 100%; display: block; position: static;\"></div>`\n  }\n\n  return sizer\n}\n\nconst Sizer: FunctionComponent<ILayoutWrapperProps> = function Sizer({\n  layout,\n  width,\n  height,\n}) {\n  if (layout === `fullWidth`) {\n    return (\n      <div aria-hidden style={{ paddingTop: `${(height / width) * 100}%` }} />\n    )\n  }\n\n  if (layout === `constrained`) {\n    return (\n      <div style={{ maxWidth: width, display: `block` }}>\n        <img\n          alt=\"\"\n          role=\"presentation\"\n          aria-hidden=\"true\"\n          src={`data:image/svg+xml;charset=utf-8,%3Csvg height='${height}' width='${width}' xmlns='http://www.w3.org/2000/svg' version='1.1'%3E%3C/svg%3E`}\n          style={{\n            maxWidth: `100%`,\n            display: `block`,\n            position: `static`,\n          }}\n        />\n      </div>\n    )\n  }\n\n  return null\n}\n\nexport const LayoutWrapper: FunctionComponent<ILayoutWrapperProps> =\n  function LayoutWrapper({ children, ...props }) {\n    return (\n      <Fragment>\n        <Sizer {...props} />\n        {children}\n\n        {SERVER ? <NativeScriptLoading /> : null}\n      </Fragment>\n    )\n  }\n","import React, { FunctionComponent, ImgHTMLAttributes } from \"react\"\nimport * as PropTypes from \"prop-types\"\n\nexport interface IResponsiveImageProps {\n  sizes?: string\n  srcSet: string\n}\n\nexport type SourceProps = IResponsiveImageProps &\n  (\n    | {\n        media: string\n        type?: string\n      }\n    | {\n        media?: string\n        type: string\n      }\n  )\n\ntype FallbackProps = { src: string } & Partial<IResponsiveImageProps>\n\ntype ImageProps = ImgHTMLAttributes<HTMLImageElement> & {\n  src: string\n  alt: string\n  shouldLoad: boolean\n}\n\nexport type PictureProps = ImgHTMLAttributes<HTMLImageElement> & {\n  fallback?: FallbackProps\n  sources?: Array<SourceProps>\n  alt: string\n  shouldLoad?: boolean\n}\n\nconst Image: FunctionComponent<ImageProps> = function Image({\n  src,\n  srcSet,\n  loading,\n  alt = ``,\n  shouldLoad,\n  ...props\n}) {\n  return (\n    <img\n      {...props}\n      decoding=\"async\"\n      loading={loading}\n      src={shouldLoad ? src : undefined}\n      data-src={!shouldLoad ? src : undefined}\n      srcSet={shouldLoad ? srcSet : undefined}\n      data-srcset={!shouldLoad ? srcSet : undefined}\n      alt={alt}\n    />\n  )\n}\n\nexport const Picture: React.FC<PictureProps> = function Picture({\n  fallback,\n  sources = [],\n  shouldLoad = true,\n  ...props\n}) {\n  const sizes = props.sizes || fallback?.sizes\n  const fallbackImage = (\n    <Image {...props} {...fallback} sizes={sizes} shouldLoad={shouldLoad} />\n  )\n\n  if (!sources.length) {\n    return fallbackImage\n  }\n\n  return (\n    <picture>\n      {sources.map(({ media, srcSet, type }) => (\n        <source\n          key={`${media}-${type}-${srcSet}`}\n          type={type}\n          media={media}\n          srcSet={shouldLoad ? srcSet : undefined}\n          data-srcset={!shouldLoad ? srcSet : undefined}\n          sizes={sizes}\n        />\n      ))}\n      {fallbackImage}\n    </picture>\n  )\n}\n\nImage.propTypes = {\n  src: PropTypes.string.isRequired,\n  alt: PropTypes.string.isRequired,\n  sizes: PropTypes.string,\n  srcSet: PropTypes.string,\n  shouldLoad: PropTypes.bool,\n}\n\nPicture.displayName = `Picture`\nPicture.propTypes = {\n  alt: PropTypes.string.isRequired,\n  shouldLoad: PropTypes.bool,\n  fallback: PropTypes.exact({\n    src: PropTypes.string.isRequired,\n    srcSet: PropTypes.string,\n    sizes: PropTypes.string,\n  }),\n  sources: PropTypes.arrayOf(\n    PropTypes.oneOfType([\n      PropTypes.exact({\n        media: PropTypes.string.isRequired,\n        type: PropTypes.string,\n        sizes: PropTypes.string,\n        srcSet: PropTypes.string.isRequired,\n      }),\n      PropTypes.exact({\n        media: PropTypes.string,\n        type: PropTypes.string.isRequired,\n        sizes: PropTypes.string,\n        srcSet: PropTypes.string.isRequired,\n      }),\n    ])\n  ),\n}\n","import React, { FunctionComponent, ImgHTMLAttributes } from \"react\"\nimport * as PropTypes from \"prop-types\"\nimport { Picture, SourceProps } from \"./picture\"\n\nexport type PlaceholderProps = ImgHTMLAttributes<HTMLImageElement> & {\n  fallback?: string\n  sources?: Array<SourceProps>\n}\n\nexport const Placeholder: FunctionComponent<PlaceholderProps> =\n  function Placeholder({ fallback, ...props }) {\n    if (fallback) {\n      return (\n        <Picture\n          {...props}\n          fallback={{\n            src: fallback,\n          }}\n          aria-hidden\n          alt=\"\"\n        />\n      )\n    } else {\n      return <div {...props}></div>\n    }\n  }\n\nPlaceholder.displayName = `Placeholder`\nPlaceholder.propTypes = {\n  fallback: PropTypes.string,\n  sources: Picture.propTypes?.sources,\n  alt: function (props, propName, componentName): Error | null {\n    if (!props[propName]) {\n      return null\n    }\n\n    return new Error(\n      `Invalid prop \\`${propName}\\` supplied to \\`${componentName}\\`. Validation failed.`\n    )\n  },\n}\n","import React from \"react\"\nimport { Picture, PictureProps } from \"./picture\"\n\nexport type MainImageProps = PictureProps\n\nexport const MainImage: React.FC<PictureProps> = function MainImage(props) {\n  return (\n    <>\n      <Picture {...props} />\n      <noscript>\n        <Picture {...props} shouldLoad={true} />\n      </noscript>\n    </>\n  )\n}\n\nMainImage.displayName = `MainImage`\nMainImage.propTypes = Picture.propTypes\n","import React from \"react\"\nimport { getWrapperProps, getMainProps, getPlaceholderProps } from \"./hooks\"\nimport { Placeholder } from \"./placeholder\"\nimport { MainImage, MainImageProps } from \"./main-image\"\nimport { LayoutWrapper } from \"./layout-wrapper\"\nimport PropTypes from \"prop-types\"\nimport type { FunctionComponent, WeakValidationMap } from \"react\"\nimport type { GatsbyImageProps, IGatsbyImageData } from \"./gatsby-image.browser\"\n\nconst removeNewLines = (str: string): string => str.replace(/\\n/g, ``)\n\nexport const GatsbyImage: FunctionComponent<GatsbyImageProps> =\n  function GatsbyImage({\n    as = `div`,\n    className,\n    class: preactClass,\n    style,\n    image,\n    loading = `lazy`,\n    imgClassName,\n    imgStyle,\n    backgroundColor,\n    objectFit,\n    objectPosition,\n    ...props\n  }) {\n    if (!image) {\n      console.warn(`[gatsby-plugin-image] Missing image prop`)\n      return null\n    }\n\n    if (preactClass) {\n      className = preactClass\n    }\n\n    imgStyle = {\n      objectFit,\n      objectPosition,\n      backgroundColor,\n      ...imgStyle,\n    }\n\n    const {\n      width,\n      height,\n      layout,\n      images,\n      placeholder,\n      backgroundColor: placeholderBackgroundColor,\n    } = image\n\n    const {\n      style: wStyle,\n      className: wClass,\n      ...wrapperProps\n    } = getWrapperProps(width, height, layout)\n\n    const cleanedImages: IGatsbyImageData[\"images\"] = {\n      fallback: undefined,\n      sources: [],\n    }\n    if (images.fallback) {\n      cleanedImages.fallback = {\n        ...images.fallback,\n        srcSet: images.fallback.srcSet\n          ? removeNewLines(images.fallback.srcSet)\n          : undefined,\n      }\n    }\n\n    if (images.sources) {\n      cleanedImages.sources = images.sources.map(source => {\n        return {\n          ...source,\n          srcSet: removeNewLines(source.srcSet),\n        }\n      })\n    }\n\n    return React.createElement(\n      as,\n      {\n        ...wrapperProps,\n        style: {\n          ...wStyle,\n          ...style,\n          backgroundColor,\n        },\n        className: `${wClass}${className ? ` ${className}` : ``}`,\n      },\n      <LayoutWrapper layout={layout} width={width} height={height}>\n        <Placeholder\n          {...getPlaceholderProps(\n            placeholder,\n            false,\n            layout,\n            width,\n            height,\n            placeholderBackgroundColor,\n            objectFit,\n            objectPosition\n          )}\n        />\n\n        <MainImage\n          data-gatsby-image-ssr=\"\"\n          className={imgClassName}\n          {...(props as Omit<\n            MainImageProps,\n            \"images\" | \"fallback\" | \"onError\" | \"onLoad\"\n          >)}\n          // When eager is set we want to start the isLoading state on true (we want to load the img without react)\n          {...getMainProps(\n            loading === `eager`,\n            false,\n            cleanedImages,\n            loading,\n            imgStyle\n          )}\n        />\n      </LayoutWrapper>\n    )\n  }\n\nexport const altValidator: PropTypes.Validator<string> = (\n  props: GatsbyImageProps,\n  propName,\n  componentName,\n  ...rest\n): Error | undefined => {\n  if (!props.alt && props.alt !== ``) {\n    return new Error(\n      `The \"alt\" prop is required in ${componentName}. If the image is purely presentational then pass an empty string: e.g. alt=\"\". Learn more: https://a11y-style-guide.com/style-guide/section-media.html`\n    )\n  }\n\n  return PropTypes.string(props, propName, componentName, ...rest)\n}\n\nexport const propTypes = {\n  image: PropTypes.object.isRequired,\n  alt: altValidator,\n} as WeakValidationMap<GatsbyImageProps>\n","import {\n  createElement,\n  memo,\n  useMemo,\n  useEffect,\n  useLayoutEffect,\n  useRef,\n} from \"react\"\nimport {\n  getWrapperProps,\n  gatsbyImageIsInstalled,\n  hasNativeLazyLoadSupport,\n} from \"./hooks\"\nimport { getSizer } from \"./layout-wrapper\"\nimport { propTypes } from \"./gatsby-image.server\"\nimport type {\n  FC,\n  ElementType,\n  FunctionComponent,\n  ImgHTMLAttributes,\n  CSSProperties,\n  ReactEventHandler,\n} from \"react\"\nimport type { renderImageToString } from \"./lazy-hydrate\"\nimport type { PlaceholderProps } from \"./placeholder\"\nimport type { MainImageProps } from \"./main-image\"\nimport type { Layout } from \"../image-utils\"\n\nconst imageCache = new Set<string>()\nlet renderImageToStringPromise\nlet renderImage: typeof renderImageToString | undefined\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport interface GatsbyImageProps\n  extends Omit<\n    ImgHTMLAttributes<HTMLImageElement>,\n    \"placeholder\" | \"onLoad\" | \"src\" | \"srcSet\" | \"width\" | \"height\"\n  > {\n  alt: string\n  as?: ElementType\n  className?: string\n  class?: string\n  imgClassName?: string\n  image: IGatsbyImageData\n  imgStyle?: CSSProperties\n  backgroundColor?: string\n  objectFit?: CSSProperties[\"objectFit\"]\n  objectPosition?: CSSProperties[\"objectPosition\"]\n  onLoad?: (props: { wasCached: boolean }) => void\n  onError?: ReactEventHandler<HTMLImageElement>\n  onStartLoad?: (props: { wasCached: boolean }) => void\n}\n\nexport interface IGatsbyImageData {\n  layout: Layout\n  width: number\n  height: number\n  backgroundColor?: string\n  images: Pick<MainImageProps, \"sources\" | \"fallback\">\n  placeholder?: Pick<PlaceholderProps, \"sources\" | \"fallback\">\n}\n\nconst GatsbyImageHydrator: FC<GatsbyImageProps> = function GatsbyImageHydrator({\n  as = `div`,\n  image,\n  style,\n  backgroundColor,\n  className,\n  class: preactClass,\n  onStartLoad,\n  onLoad,\n  onError,\n  ...props\n}) {\n  const { width, height, layout } = image\n  const {\n    style: wStyle,\n    className: wClass,\n    ...wrapperProps\n  } = getWrapperProps(width, height, layout)\n  const root = useRef<HTMLElement>()\n  const cacheKey = useMemo(() => JSON.stringify(image.images), [image.images])\n\n  // Preact uses class instead of className so we need to check for both\n  if (preactClass) {\n    className = preactClass\n  }\n\n  const sizer = getSizer(layout, width, height)\n\n  useEffect(() => {\n    if (!renderImageToStringPromise) {\n      renderImageToStringPromise = import(`./lazy-hydrate`).then(\n        ({ renderImageToString, swapPlaceholderImage }) => {\n          renderImage = renderImageToString\n\n          return {\n            renderImageToString,\n            swapPlaceholderImage,\n          }\n        }\n      )\n    }\n\n    // The plugin image component is a bit special where if it's server-side rendered, we add extra script tags to support lazy-loading without\n    // In this case we stop hydration but fire the correct events.\n    const ssrImage = root.current.querySelector(\n      `[data-gatsby-image-ssr]`\n    ) as HTMLImageElement\n    if (ssrImage && hasNativeLazyLoadSupport()) {\n      if (ssrImage.complete) {\n        // Trigger onStartload and onLoad events\n        onStartLoad?.({\n          wasCached: true,\n        })\n        onLoad?.({\n          wasCached: true,\n        })\n\n        // remove ssr key for state updates but add delay to not fight with native code snippt of gatsby-ssr\n        setTimeout(() => {\n          ssrImage.removeAttribute(`data-gatsby-image-ssr`)\n        }, 0)\n      } else {\n        onStartLoad?.({\n          wasCached: true,\n        })\n\n        ssrImage.addEventListener(`load`, function onLoadListener() {\n          ssrImage.removeEventListener(`load`, onLoadListener)\n\n          onLoad?.({\n            wasCached: true,\n          })\n          // remove ssr key for state updates but add delay to not fight with native code snippt of gatsby-ssr\n          setTimeout(() => {\n            ssrImage.removeAttribute(`data-gatsby-image-ssr`)\n          }, 0)\n        })\n      }\n\n      imageCache.add(cacheKey)\n\n      return\n    }\n\n    if (renderImage && imageCache.has(cacheKey)) {\n      return\n    }\n\n    let animationFrame\n    let cleanupCallback\n    renderImageToStringPromise.then(\n      ({ renderImageToString, swapPlaceholderImage }) => {\n        if (!root.current) {\n          return\n        }\n\n        root.current.innerHTML = renderImageToString({\n          isLoading: true,\n          isLoaded: imageCache.has(cacheKey),\n          image,\n          ...props,\n        })\n\n        if (!imageCache.has(cacheKey)) {\n          animationFrame = requestAnimationFrame(() => {\n            if (root.current) {\n              cleanupCallback = swapPlaceholderImage(\n                root.current,\n                cacheKey,\n                imageCache,\n                style,\n                onStartLoad,\n                onLoad,\n                onError\n              )\n            }\n          })\n        }\n      }\n    )\n\n    // eslint-disable-next-line consistent-return\n    return (): void => {\n      if (animationFrame) {\n        cancelAnimationFrame(animationFrame)\n      }\n      if (cleanupCallback) {\n        cleanupCallback()\n      }\n    }\n  }, [image])\n\n  // useLayoutEffect is ran before React commits to the DOM. This allows us to make sure our HTML is using our cached image version\n  useLayoutEffect(() => {\n    if (imageCache.has(cacheKey) && renderImage) {\n      root.current.innerHTML = renderImage({\n        isLoading: imageCache.has(cacheKey),\n        isLoaded: imageCache.has(cacheKey),\n        image,\n        ...props,\n      })\n\n      // Trigger onStartload and onLoad events\n      onStartLoad?.({\n        wasCached: true,\n      })\n      onLoad?.({\n        wasCached: true,\n      })\n    }\n  }, [image])\n\n  // By keeping all props equal React will keep the component in the DOM\n  return createElement(as, {\n    ...wrapperProps,\n    style: {\n      ...wStyle,\n      ...style,\n      backgroundColor,\n    },\n    className: `${wClass}${className ? ` ${className}` : ``}`,\n    ref: root,\n    dangerouslySetInnerHTML: {\n      __html: sizer,\n    },\n    suppressHydrationWarning: true,\n  })\n}\n\nexport const GatsbyImage: FunctionComponent<GatsbyImageProps> = memo(\n  function GatsbyImage(props) {\n    if (!props.image) {\n      if (process.env.NODE_ENV === `development`) {\n        console.warn(`[gatsby-plugin-image] Missing image prop`)\n      }\n\n      return null\n    }\n\n    if (!gatsbyImageIsInstalled() && process.env.NODE_ENV === `development`) {\n      console.warn(\n        `[gatsby-plugin-image] You're missing out on some cool performance features. Please add \"gatsby-plugin-image\" to your gatsby-config.js`\n      )\n    }\n\n    return createElement(GatsbyImageHydrator, props)\n  }\n)\n\nGatsbyImage.propTypes = propTypes\nGatsbyImage.displayName = `GatsbyImage`\n","import React, { FunctionComponent, ReactElement } from \"react\"\nimport {\n  altValidator,\n  GatsbyImage as GatsbyImageServer,\n} from \"./gatsby-image.server\"\nimport { GatsbyImageProps, IGatsbyImageData } from \"./gatsby-image.browser\"\nimport PropTypes from \"prop-types\"\nimport { ISharpGatsbyImageArgs } from \"../image-utils\"\n\nexport interface IStaticImageProps\n  extends Omit<GatsbyImageProps, \"image\">,\n    Omit<ISharpGatsbyImageArgs, \"backgroundColor\"> {\n  src: string\n}\n\n// These values are added by Babel. Do not add them manually\ninterface IPrivateProps {\n  __imageData?: IGatsbyImageData\n  __error?: string\n}\n\nexport function _getStaticImage(\n  GatsbyImage: FunctionComponent<GatsbyImageProps>\n): React.FC<IStaticImageProps & IPrivateProps> {\n  return function StaticImage({\n    src,\n    __imageData: imageData,\n    __error,\n    // We extract these because they're not meant to be passed-down to GatsbyImage\n    /* eslint-disable @typescript-eslint/no-unused-vars */\n    width,\n    height,\n    aspectRatio,\n    tracedSVGOptions,\n    placeholder,\n    formats,\n    quality,\n    transformOptions,\n    jpgOptions,\n    pngOptions,\n    webpOptions,\n    avifOptions,\n    blurredOptions,\n    breakpoints,\n    outputPixelDensities,\n    /* eslint-enable @typescript-eslint/no-unused-vars */\n    ...props\n  }): ReactElement {\n    if (__error) {\n      console.warn(__error)\n    }\n\n    if (imageData) {\n      return <GatsbyImage image={imageData} {...props} />\n    }\n    console.warn(`Image not loaded`, src)\n    if (!__error && process.env.NODE_ENV === `development`) {\n      console.warn(\n        `Please ensure that \"gatsby-plugin-image\" is included in the plugins array in gatsby-config.js, and that your version of gatsby is at least 2.24.78`\n      )\n    }\n    return null\n  }\n}\n\nconst StaticImage: React.FC<IStaticImageProps & IPrivateProps> =\n  _getStaticImage(GatsbyImageServer)\n\nconst checkDimensionProps: PropTypes.Validator<number> = (\n  props: IStaticImageProps & IPrivateProps,\n  propName: keyof IStaticImageProps & IPrivateProps,\n  ...rest\n) => {\n  if (\n    props.layout === `fullWidth` &&\n    (propName === `width` || propName === `height`) &&\n    props[propName]\n  ) {\n    return new Error(\n      `\"${propName}\" ${props[propName]} may not be passed when layout is fullWidth.`\n    )\n  }\n  return PropTypes.number(props, propName, ...rest)\n}\n\nconst validLayouts = new Set([`fixed`, `fullWidth`, `constrained`])\n\nexport const propTypes = {\n  src: PropTypes.string.isRequired,\n  alt: altValidator,\n  width: checkDimensionProps,\n  height: checkDimensionProps,\n  sizes: PropTypes.string,\n  layout: (props: IStaticImageProps & IPrivateProps): Error | undefined => {\n    if (props.layout === undefined) {\n      return undefined\n    }\n    if (validLayouts.has(props.layout)) {\n      return undefined\n    }\n\n    return new Error(\n      `Invalid value ${props.layout}\" provided for prop \"layout\". Defaulting to \"constrained\". Valid values are \"fixed\", \"fullWidth\" or \"constrained\".`\n    )\n  },\n}\n\nStaticImage.displayName = `StaticImage`\nStaticImage.propTypes = propTypes\n\nexport { StaticImage }\n","import {\n  GatsbyImage as GatsbyImageBrowser,\n  IGatsbyImageData,\n} from \"./gatsby-image.browser\"\nimport React from \"react\"\nimport {\n  _getStaticImage,\n  propTypes,\n  IStaticImageProps,\n} from \"./static-image.server\"\n// These values are added by Babel. Do not add them manually\ninterface IPrivateProps {\n  __imageData?: IGatsbyImageData\n  __error?: string\n}\n\nconst StaticImage: React.FC<IStaticImageProps & IPrivateProps> =\n  _getStaticImage(GatsbyImageBrowser)\n\nStaticImage.displayName = `StaticImage`\nStaticImage.propTypes = propTypes\n\nexport { StaticImage }\n","'use strict';\n\nconst preserveCamelCase = string => {\n\tlet isLastCharLower = false;\n\tlet isLastCharUpper = false;\n\tlet isLastLastCharUpper = false;\n\n\tfor (let i = 0; i < string.length; i++) {\n\t\tconst character = string[i];\n\n\t\tif (isLastCharLower && /[a-zA-Z]/.test(character) && character.toUpperCase() === character) {\n\t\t\tstring = string.slice(0, i) + '-' + string.slice(i);\n\t\t\tisLastCharLower = false;\n\t\t\tisLastLastCharUpper = isLastCharUpper;\n\t\t\tisLastCharUpper = true;\n\t\t\ti++;\n\t\t} else if (isLastCharUpper && isLastLastCharUpper && /[a-zA-Z]/.test(character) && character.toLowerCase() === character) {\n\t\t\tstring = string.slice(0, i - 1) + '-' + string.slice(i - 1);\n\t\t\tisLastLastCharUpper = isLastCharUpper;\n\t\t\tisLastCharUpper = false;\n\t\t\tisLastCharLower = true;\n\t\t} else {\n\t\t\tisLastCharLower = character.toLowerCase() === character && character.toUpperCase() !== character;\n\t\t\tisLastLastCharUpper = isLastCharUpper;\n\t\t\tisLastCharUpper = character.toUpperCase() === character && character.toLowerCase() !== character;\n\t\t}\n\t}\n\n\treturn string;\n};\n\nconst camelCase = (input, options) => {\n\tif (!(typeof input === 'string' || Array.isArray(input))) {\n\t\tthrow new TypeError('Expected the input to be `string | string[]`');\n\t}\n\n\toptions = Object.assign({\n\t\tpascalCase: false\n\t}, options);\n\n\tconst postProcess = x => options.pascalCase ? x.charAt(0).toUpperCase() + x.slice(1) : x;\n\n\tif (Array.isArray(input)) {\n\t\tinput = input.map(x => x.trim())\n\t\t\t.filter(x => x.length)\n\t\t\t.join('-');\n\t} else {\n\t\tinput = input.trim();\n\t}\n\n\tif (input.length === 0) {\n\t\treturn '';\n\t}\n\n\tif (input.length === 1) {\n\t\treturn options.pascalCase ? input.toUpperCase() : input.toLowerCase();\n\t}\n\n\tconst hasUpperCase = input !== input.toLowerCase();\n\n\tif (hasUpperCase) {\n\t\tinput = preserveCamelCase(input);\n\t}\n\n\tinput = input\n\t\t.replace(/^[_.\\- ]+/, '')\n\t\t.toLowerCase()\n\t\t.replace(/[_.\\- ]+(\\w|$)/g, (_, p1) => p1.toUpperCase())\n\t\t.replace(/\\d+(\\w|$)/g, m => m.toUpperCase());\n\n\treturn postProcess(input);\n};\n\nmodule.exports = camelCase;\n// TODO: Remove this for the next major release\nmodule.exports.default = camelCase;\n","import React, { useEffect, useRef } from 'react';\n\nconst useScrollListener = (element) => {\n  const [scrollDirection, setScrollDirection] =  React.useState(0);\n  const scrollEnabled = useRef(false);\n\n  useEffect(() => {\n\n    const onWheelHandler = (e) => {\n      if ( e.deltaY === 0 ) return;\n      if ( scrollEnabled.current ) {\n        disableScroll();\n        setScrollDirection(Math.sign(e.deltaY));\n      }\n    };\n  \n    if( !element ) return;\n    element.addEventListener('wheel', onWheelHandler);\n    \n  }, [element]);\n\n  const enableScroll = () => {\n    setScrollDirection(0);\n    scrollEnabled.current = true;\n  };\n\n  const disableScroll = () => {\n    scrollEnabled.current = false;\n  };\n\n  return [scrollDirection, enableScroll];\n};\n\nexport default useScrollListener;","import React from \"react\";\n\nexport default function useDeviceDetect() {\n  const [isMobile, setMobile] = React.useState(undefined);\n\n  React.useEffect(() => {\n    const userAgent =\n      typeof window.navigator === \"undefined\" ? \"\" : navigator.userAgent;\n    const mobile = Boolean(\n      userAgent.match(\n        /Android|BlackBerry|iPhone|iPad|iPod|Opera Mini|IEMobile|WPDesktop/i\n      )\n    );\n    setMobile(mobile);\n  }, []);\n\n  return { isMobile };\n}\n\n","import React from 'react';\n\nimport ThemeProvider from '@styles/ThemeProvider';\n\nconst Layout = ( {current, children} ) => {\n\n  return (\n    <>\n      <div id=\"root\">\n        <ThemeProvider current={current}>\n          {children}\n        </ThemeProvider>\n      </div>\n    </>\n  );\n}\n\nexport default Layout;","import React from \"react\";\nimport styled from '@emotion/styled';\n\nimport { Nav } from \"@components\";\n\nconst StyledHeader = styled.header`\n  grid-area: 1 / 1 / 1 / 4;\n  z-index: 1;\n`;\n\nconst Header = ( props ) => {\n\n  return (\n    <StyledHeader>\n      <Nav {...props} />\n    </StyledHeader>\n  );\n};\n\nexport default Header;","import React, { useEffect, useRef } from \"react\";\nimport styled from '@emotion/styled';\n\nimport { navLinks } from \"@config\";\nimport { ResumeButton } from \"@components\";\n\nconst StyledNav = styled.nav`\n  display: grid;\n  grid: 1fr / 1fr 7fr;\n  padding: 0px 40px;\n  height: 100px;\n  align-items: center;\n\n  .links-outer {\n    grid-area: 1 / 2;\n    justify-self: flex-end;\n    \n    ol {\n      padding: 0;\n      margin: 0px ${props => props.current ? '150px' : '0px'} 0px 0px;\n      transition: all 250ms 1200ms cubic-bezier(0.645, 0.045, 0.355, 1);\n  \n      li {\n        display: inline;\n        margin: 0 5px;\n        position: relative;\n        counter-increment: item 1;\n        font-size: var(--fz-md);\n      }\n    }\n  }\n\n  .resume-button {\n    grid-area: 1 / 2;\n    justify-self: flex-end;\n  }\n\n`;\n\n\nconst StyledLinkButton = styled.button`\n    color: ${props => props.active ? 'var(--highlight)' : 'var(--text2)'};\n    background-color: transparent;\n    padding: 0.75rem 1rem;\n    border: none;\n    margin-right: 10px;\n    cursor: pointer;\n    transition: var(--transition);\n    &:hover {\n      color: var(--highlight);\n    }\n\n    &:before {\n      content: '0' counter(item) '.';\n      margin-right: 5px;\n      color: var(--highlight);\n      transition: var(--transition);\n    }\n    \n`;\n\nconst HomeButton = styled.button`\n  justify-self: center;\n  grid-area: 1 / 1; \n  color: var(--highlight);\n  font-size: var(--fz-xl);\n  background-color: transparent;\n  width: 70px;\n  height: 70px;\n  border: 2px solid var(--highlight);\n  border-radius: 35px;\n  padding: 0.75rem 1rem;\n  cursor: pointer;\n  transition: var(--transition);\n  &:hover {\n    background-color: var(--tint);\n    outline: none;\n  }\n`;\n\nconst Nav = ( { current, setIncrement } ) => {\n\n  const [active, setActive] = React.useState(0);\n  const [showResumeButton, setShowResumeButton] = React.useState(false);\n  const linksRef = useRef(null);\n\n  useEffect(() => {\n    setActive(current);\n  }, [current]);\n\n  const handleLinkClick = (clicked) => {\n    setIncrement(clicked - current);\n    setActive(clicked);\n  };\n\n  const handleHomeClick = () => {\n    setIncrement(0 - current);\n  };\n\n  const handleTransitionEnd = (props) => {\n    if ( props.target === linksRef.current && current > 0 ) {\n      setShowResumeButton(true);\n    }\n  };\n\n  return (\n    <StyledNav current={current} active={active} onTransitionEnd={handleTransitionEnd}>\n      <HomeButton onClick={handleHomeClick} >{`PW`}</HomeButton>\n      <div className=\"links-outer\" >\n          <ol ref={linksRef}>\n            {navLinks &&\n              navLinks.map(({ url, name }, i) => (\n                <li key={i}>\n                  <StyledLinkButton \n                    onClick={() => handleLinkClick(i + 1)} \n                    active={active === i + 1}\n                  >\n                    {name}\n                  </StyledLinkButton>\n                </li>\n              ))}\n          </ol>\n      </div>\n      <ResumeButton \n        current={current}\n        visible={showResumeButton}\n        setVisible={setShowResumeButton}\n      />\n    </StyledNav>\n  );\n};\n\nexport default Nav;\n","import objectWithoutPropertiesLoose from \"./objectWithoutPropertiesLoose.js\";\nexport default function _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n  return target;\n}","export default function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  for (var key in source) {\n    if (Object.prototype.hasOwnProperty.call(source, key)) {\n      if (excluded.indexOf(key) >= 0) continue;\n      target[key] = source[key];\n    }\n  }\n  return target;\n}","import React, { useEffect, useCallback } from 'react';\nimport styled from '@emotion/styled';\n\nimport { useScrollListener } from '@hooks';\n\nimport { Content }  from  '@templates';\n\nconst StyledSection = styled.section`\n  id: ${props => props.id ? props.id : undefined};\n  display: flex;\n  flex-direction: column;\n  grid-area: 1 / 1 / -1 / -1;\n  height: 100%;\n  width: 100%;\n  justify-content: center;\n  animation: ${props => props.animation} 1s ease forwards;\n`;\n\nconst animations = {\n  navForward: {\n    entrance: 'slidein-bottom',\n    exit: 'slideout-top',\n  },\n  navBackward: {\n    entrance: 'slidein-top',\n    exit: 'slideout-bottom',\n  },\n  pageLoad: 'slidein-right',\n};\n\nconst Section = ({ id, heading, current, setCurrent, next, increment, setIncrement, ...props }) => {\n  const [element, setElement] = React.useState();\n  const [animation, setAnimation] = React.useState('none');\n  const [mounted, setMounted] = React.useState(false);\n  const [scrollDirection, enableScroll] = useScrollListener(element);\n\n  const sectionRef = useCallback((node) => {\n    setElement(node);\n  },[]);\n\n  // Current section updates\n  useEffect(() => {\n    if (current !== id ) return;\n    updateAnimation();\n    setMounted(true);\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  },[current]);\n\n  // Scroll triggered\n  useEffect(() => {\n    if ( current !== id ) return;\n    if (current + scrollDirection < 0 || current + scrollDirection > 4) return enableScroll();\n    setIncrement(scrollDirection);\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  },[scrollDirection]);\n\n  // Increment updates\n  useEffect(() => {\n    if ( current !== id ) return;\n    if ( increment === 0 ) return;\n    next.current  = current + increment;\n    updateAnimation()\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [increment]);\n\n\n  const handleAnimationEnd = (props) => {\n    const animationName = props.animationName;\n    if ( current !== id ) return;\n    if ( animationName === animations.pageLoad ) return handleEntranceAnimationEnd();\n    if ( animationName === animations.navForward.entrance ) return handleEntranceAnimationEnd();\n    if ( animationName === animations.navBackward.entrance ) return handleEntranceAnimationEnd();\n    if ( animationName === animations.navForward.exit ) return handleExitAnimationEnd();\n    if ( animationName === animations.navBackward.exit ) return handleExitAnimationEnd();\n  };\n\n  const handleEntranceAnimationEnd = () => {\n    enableScroll();\n    setIncrement(0);\n  };\n\n  const handleExitAnimationEnd = () => {\n    setMounted(false)\n    setCurrent(next.current);\n  };\n\n  const updateAnimation = () => {\n    //console.log(`ID[${id}] : ${next.current === current} | ${increment}`)\n    if (next.current === current && increment < 0) return setAnimation(animations.navBackward.entrance);\n    if (next.current  === current && increment > 0) return setAnimation(animations.navForward.entrance);\n    if (next.current  !== current && increment  > 0) return setAnimation(animations.navForward.exit);\n    if (next.current !== current && increment < 0) return setAnimation(animations.navBackward.exit);\n    if (next.current === current && increment === 0) return setAnimation(animations.pageLoad);\n    return 'none';\n  }\n\n  return (\n    <  >\n      {\n        mounted &&\n        <StyledSection id={id} ref={sectionRef} animation={animation} onAnimationEnd={handleAnimationEnd}>\n          <Content sectionID={id} heading={heading} >\n            {props.children}\n          </Content>\n        </StyledSection>\n      }\n    </>\n  );\n}\n\nexport default Section;\n","import React from 'react';\nimport styled from '@emotion/styled';\n\nimport { GatsbyImage, getImage } from 'gatsby-plugin-image'\n\nconst StyledImage = styled.div`\n  position: relative;\n\n  .wrapper {\n    z-index: 0;\n    display: inline-flex;\n    position: relative;\n    border-radius: var(--border-radius);\n    //background-color: var(--highlight);\n\n    &:hover,\n    &:focus {\n      background: transparent;\n\n      .image {\n        filter: none;\n        mix-blend-mode: normal;\n      }\n    }\n\n    .image {\n      z-index: -1;\n      position: relative;\n      border-radius: var(--border-radius);\n      mix-blend-mode: multiply;\n      filter: grayscale(100%) contrast(1);\n      transition: var(--transition);\n    }\n\n    &:before {\n      content: '';\n      display: block;\n      position: absolute;\n      width: 100%;\n      height: 100%;\n      border-radius: var(--border-radius);\n      transition: var(--transition);\n      top: 0;\n      left: 0;\n      background-color: var(--primary1);\n      mix-blend-mode: screen;\n    }\n  }\n`;\n\nconst Image = ( { image, alt }) => {\n\n  return (\n    <StyledImage>\n      <div className=\"wrapper\">\n      <GatsbyImage\n        className=\"image\"\n        image={getImage(image)}\n        alt={alt || \"\"}\n      />\n      </div>\n    </StyledImage>\n  );\n\n};\n\nexport default Image;","import React from 'react';\nimport styled from '@emotion/styled';\n\nconst StyledDiv = styled.div`\n  padding: 0% 15%;\n\n  .numbered-heading {\n    display: flex;\n    align-items: center;\n    position: relative;\n    margin: 10px 0 40px;\n    width: 100%;\n    font-size: clamp(26px, 5vw, var(--fz-heading));\n    white-space: nowrap;\n\n    &:before {\n      position: relative;\n      bottom: 4px;\n      counter-increment: section;\n      content: '0' '${props => props.sectionID || 'x'}' '.';\n      margin-right: 10px;\n      color: var(--highlight);\n      font-family: var(--font-mono);\n      font-size: clamp(var(--fz-md), 3vw, var(--fz-xl));\n      font-weight: 400;\n\n      @media (max-width: 480px) {\n        margin-bottom: -3px;\n        margin-right: 5px;\n      }\n    }\n\n    &:after {\n      content: '';\n      display: block;\n      position: relative;\n      top: -5px;\n      width: 100%;\n      height: 1px;\n      margin-left: 20px;\n      background-color: var(--text1);\n    }\n  }\n`;\n\nconst Content = ( { sectionID, heading, children } ) => {\n  \n  return (\n    <StyledDiv sectionID={sectionID} >\n      { heading && <h2 className=\"numbered-heading\">{heading}</h2> }\n      {children}\n    </StyledDiv>\n  )\n}\n\nexport default Content;\n","import React from 'react';\nimport styled from '@emotion/styled';\n\nimport { Section }  from  '@templates';\nimport { resumeFileID } from '@config';\nimport { ResumeButton } from \"@components\";\n\nconst StyledContent = styled.div`\n\n  .sub-heading {\n    color: var(--text2);\n    font-size: clamp(12px, 2.5vw, 21px);\n  }\n\n`;\n\nconst Home = (props) => {\n\n  return (\n    <Section {...props}>\n      <StyledContent >\n        <h1 className='big-heading'>Philo Waddell</h1>\n        <h2 className='sub-heading'>Full Stack Engineer & Machine Learning Enthusiast</h2>\n        <ResumeButton \n          // This is a bit hacky, should refactor component\n          current={1}\n          visible={true}\n          setVisible={() => true}\n        />\n      </StyledContent>\n    </Section>\n  )\n}\n\nexport default Home;","import React from 'react';\nimport styled from '@emotion/styled';\n\nimport { MDXRenderer } from 'gatsby-plugin-mdx'\nimport { useStaticQuery, graphql } from \"gatsby\";\n\nimport { Section }  from  '@templates';\n\nconst AboutContent = styled.div`\n  .about-text {\n    font-size: var(--fz-xl);\n    color: var(--text2);\n\n    ul {\n      display: grid;\n      grid-template-columns: repeat(3, minmax(140px, 200px));\n      grid-gap: 0 10px;\n      padding: 0;\n      margin: 20px 0 0 0;\n      overflow: hidden;\n      list-style: none;\n  \n      li {\n        position: relative;\n        margin-bottom: 10px;\n        padding-left: 20px;\n        font-family: var(--font-mono);\n        font-size: var(--fz-md);\n  \n        &:before {\n          content: '▹';\n          position: absolute;\n          left: 0;\n          color: var(--highlight);\n          font-size: var(--fz-md);\n          line-height: 12px;\n        }\n      }\n    }\n\n  }\n\n`;\n\nconst About = (props) => {\n\n  const data = useStaticQuery(graphql`\n    query {\n      allMdx( filter: {fileAbsolutePath: {regex: \"/about/\"}} ) {\n        nodes {\n          id\n          frontmatter {\n            heading\n          }\n          body\n        }\n      }\n    }\n  `);\n\n  const { frontmatter, body } = data.allMdx.nodes[0];\n  const { heading } = frontmatter;\n  \n  return (\n    <Section heading={heading} {...props}>\n      <AboutContent>\n        <div className='about-text'>\n          <MDXRenderer> \n            {body} \n          </MDXRenderer>\n        </div>\n      </AboutContent>\n    </Section>\n  )\n}\n\nexport default About;\n","import React from 'react';\nimport { keyframes } from \"@emotion/react\"\nimport styled from '@emotion/styled'\n\nconst SkillListItem = styled.li`\n  display: flex;\n  margin: 15px 20px 15px 20px;\n  animation: fadeInUp 500ms ${props => props.transitionDelay || '1500'}ms ease 1 both;\n\n  .skill-title {\n    color: var(--highlight);\n    font-family: var(--font-mono);\n    margin: 0px;\n    min-width: 130px;\n  }\n\n  .skill-bar-outer {\n    display: flex;\n    flex-grow: 1;\n\n    .skill-bar-inner {\n      background: var(--highlight);\n      width: 0px;\n      height: 2px;\n      border-radius: 10px / 10px;\n      align-self: center;\n      animation: ${props => grow(props.width)} 1s ${props => props.transitionDelay + 500}ms cubic-bezier(0.27, 0.63, 0.36, 1) 1 forwards;\n    }\n\n  }\n\n  .skill-percent {\n    font-size: var(--fz-md);\n    color: var(--highlight);\n  }\n\n`;\n\nconst grow = (width) => keyframes`\n  from { width: 0px; }\n  to { width: ${width}%; }\n`\n\nconst SkillBar = ( { transitionDelay, skill, width } ) => {\n\n  // const [clientWidth, skillBarRef] = useStateRef(node => (node?.clientWidth || 0));\n\n  // useEffect(() => {\n  //   console.log(`the new clientHeight is: ${clientWidth}`);\n  // }, [clientWidth])\n\n  return (\n    <SkillListItem transitionDelay={transitionDelay} width={width}>\n      <h5 className='skill-title'>{skill}</h5>\n      <div className='skill-bar-outer'>\n        <div \n          className='skill-bar-inner' \n          // ref={skillBarRef} \n        />\n      </div>\n      {/* <p className='skill-percent'>{`${percentage}%`}</p> */}\n    </SkillListItem>\n  )\n};\n\nexport default SkillBar;\n","import React from \"react\";\nimport styled from \"@emotion/styled\";\n\nimport { MDXRenderer } from \"gatsby-plugin-mdx\";\nimport { useStaticQuery, graphql } from \"gatsby\";\n\nimport { Section, Image } from \"@templates\";\nimport SkillBar from \"./skillbar\";\n\nconst ExperienceContent = styled.div`\n\n  display: grid;\n  grid: auto / 5fr 4fr;\n\n  .experience-skills {\n    grid-area: 1 / 2 / 3 / 3;\n\n    .skills-heading {\n      font-family: var(--font-mono);\n      padding-bottom: 15px;\n      color: var(--highlight);\n\n      &:after {\n        content: '';\n        display: block;\n        position: relative;\n        bottom: -10px;\n        width: 100%;\n        height: 1px;\n        background-color: var(--highlight);\n      }\n\n    }\n\n    ul {\n      display: flex;\n      flex-direction: column;\n      padding: 0px;\n      margin: 0px 0px 0px 40px;\n      list-style-type: none;\n  \n      li {\n        margin-left: 0px;\n      }\n\n    }\n\n  }\n\n  .experience-text {\n    font-size: var(--fz-xl);\n    color: var(--text2);\n  }\n\n  .experience-tools {\n    grid-area: 2 / 1 / 3 / 2;\n    display: grid;\n    grid: auto / repeat(5, 1fr);\n    align-items: center;\n    justify-content: center;\n    \n    .tool-logo { \n      justify-self: center;\n      padding: 10px 10px 0px 10px;\n    }\n  }\n\n`;\n\nconst Experience = (props) => {\n  const data = useStaticQuery(graphql`\n    query {\n      allMdx(filter: { fileAbsolutePath: { regex: \"/experience/\" } }) {\n        nodes {\n          id\n          frontmatter {\n            heading\n            skills\n            tools {\n              childImageSharp {\n                gatsbyImageData(width: 60, quality: 80, layout: CONSTRAINED)\n              }\n            }\n          }\n          body\n        }\n      }\n    }\n  `);\n\n  const { frontmatter, body } = data.allMdx.nodes[0];\n  const { heading, skills, tools } = frontmatter;\n  const skillsJson = Object.fromEntries(skills.map((s) => s.split(\",\")));\n\n  return (\n    <Section heading={heading} {...props}>\n      <ExperienceContent>\n          <div className=\"experience-text\">\n            <MDXRenderer>{body}</MDXRenderer>\n          </div>\n          <div className=\"experience-skills\">\n            <ul>\n              <h3 className=\"skills-heading\">Languages</h3>\n              {Object.entries(skillsJson).map(([skill, width], i) => (\n                <SkillBar\n                  key={i}\n                  transitionDelay={1500}\n                  skill={skill}\n                  width={width}\n                />\n              ))}\n            </ul>\n          </div>\n          <div className=\"experience-tools\">\n            {tools.map((image, i) => (\n              <div className=\"tool-logo\" key={i}>\n                <Image key={i} image={image} />\n              </div>\n            ))}\n          </div>\n      </ExperienceContent>\n    </Section>\n  );\n};\n\nexport default Experience;\n","import React from 'react';\n\nconst IconGitHub = () => (\n  <svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    role=\"img\"\n    viewBox=\"0 0 24 24\"\n    fill=\"none\"\n    stroke=\"currentColor\"\n    strokeWidth=\"2\"\n    strokeLinecap=\"round\"\n    strokeLinejoin=\"round\"\n    className=\"feather feather-github\">\n    <title>GitHub</title>\n    <path d=\"M9 19c-5 1.5-5-2.5-7-3m14 6v-3.87a3.37 3.37 0 0 0-.94-2.61c3.14-.35 6.44-1.54 6.44-7A5.44 5.44 0 0 0 20 4.77 5.07 5.07 0 0 0 19.91 1S18.73.65 16 2.48a13.38 13.38 0 0 0-7 0C6.27.65 5.09 1 5.09 1A5.07 5.07 0 0 0 5 4.77a5.44 5.44 0 0 0-1.5 3.78c0 5.42 3.3 6.61 6.44 7A3.37 3.37 0 0 0 9 18.13V22\"></path>\n  </svg>\n);\n\nexport default IconGitHub;\n","import React, { useEffect } from 'react';\nimport { MDXRenderer } from 'gatsby-plugin-mdx'\nimport styled from '@emotion/styled';\n\nimport { Image } from '@templates';\nimport IconGitHub from '@components/icons/github'\nconst StyledProject = styled.div`\n\n  display: grid;\n  grid: 1fr /  repeat(6, 1fr);\n  height: 380px;\n  animation: ${props => props.animation} 1s ease forwards;\n\n  .project-image {\n    z-index: 1;\n    grid-area: 1 / 4 / 1 / 7;\n    align-self: center;\n  }\n\n  .project-content {\n\n    z-index: 2;\n\n    grid-area: 1 / 1 / 1 / 5;\n    text-align: left;\n    align-self: center;\n\n    .project-title {\n      display: inline-flex;\n      margin-bottom: 20px;\n      .title-text {\n        margin: 0px 20px 0px 0px;\n        font-size: clamp(24px, 5vw, 28px);\n        color: var(--text1);\n      }\n\n      a {\n        align-self: center;\n        svg {\n          width: 20px;\n          height: 20px;\n          color: var(--highlight);\n        }\n      }\n    }\n\n\n    .project-description {\n      padding: 25px;\n      font-size: var(--fz-xl);\n      color: var(--text2);\n      background-color: var(--primary2);\n      border-radius: var(--border-radius);\n    }\n\n    .box-shadow {\n      box-shadow: 0 10px 30px -15px var(--shadow);\n      transition: var(--transition);\n  \n      &:hover,\n      &:focus {\n        box-shadow: 0 20px 30px -15px var(--shadow);\n      }\n    }\n\n    .project-tech-list {\n      display: flex;\n      flex-wrap: wrap;\n      position: relative;\n      z-index: 2;\n      margin: 25px 0 10px;\n      padding: 0;\n      list-style: none;\n  \n      li {\n        margin: 0 20px 5px 0;\n        color: var(--text2);\n        font-family: var(--font-mono);\n        font-size: var(--fz-xs);\n        white-space: nowrap;\n      }\n  \n      @media (max-width: 768px) {\n        margin: 10px 0;\n  \n        li {\n          margin: 0 10px 5px 0;\n          color: var(--text1);\n        }\n      }\n    }\n\n  }\n`;\n\nconst Project = ({ id, totalProjects, data, current, setCurrent, increment, setIncrement }) => {\n  const [mounted, setMounted] = React.useState(false);\n  const [visible, setVisible] = React.useState(false);\n  const { title, body, github, image, imageAlt, tech } = data;\n\n  useEffect(() => {\n    if ( current === id ) {\n      setVisible(true);\n      setMounted(true);\n    }\n  },[current, id]);\n\n  const nextClicked = () => {\n    setVisible(false);\n    setIncrement(1);\n  };\n\n  const prevClicked = () => {\n    setVisible(false);\n    setIncrement(-1);\n  };\n\n  const unmount = () => {\n    if ( visible ) return setIncrement(0);\n    setMounted(false);\n    setCurrent(prev => prev + increment);\n  };\n\n  const getAnimation = () => {\n    if ( visible && increment === 1 ) return 'slidein-right';\n    if ( !visible && increment === 1 ) return 'slideout-left';\n    if ( !visible && increment === -1 ) return 'slideout-right';\n    if ( visible && increment === -1 ) return 'slidein-left';\n    return 'none';\n  }\n\n  return (\n    <>\n      { \n        mounted && \n        <StyledProject animation={getAnimation} onAnimationEnd={() => unmount()}>\n          <div className='project-content'>\n            <div className='project-title'>\n              <h3 className='title-text'>{title}</h3>\n              <a href={github} target=\"_blank\" rel=\"noreferrer\">\n                <IconGitHub/>\n              </a>\n            </div>\n            <div className='project-description box-shadow'>\n              <MDXRenderer> \n                {body} \n              </MDXRenderer>\n            </div>\n            <ul className='project-tech-list'>\n              {tech && tech.map((tech, i) => (\n                <li key={i}>{tech}</li>\n              ))}\n            </ul>\n            <div className='project-links'>\n\n            </div>\n            <div className='project-nav'>\n              { \n                current > 0 &&\n                <button className='smallButton' onClick={() => prevClicked()}>Prev</button>\n              }\n              { \n                current < totalProjects - 1 &&\n                <button className='smallButton' onClick={() => nextClicked()}>Next</button>\n              }\n            </div>        \n          </div>\n          <div className='project-image'>\n            <Image \n              image={image}\n              alt={imageAlt}\n            />\n          </div>\n        </StyledProject>\n      }\n    </>\n  )\n}\n\nexport default Project;","import React from 'react';\nimport { useStaticQuery, graphql } from \"gatsby\";\nimport Section from '@templates/section';\n\nimport Project from './project';\n\nconst Projects = (props) => {\n\n  const [currentProject, setCurrentProject] = React.useState(0);\n  const [increment, setIncrement] = React.useState(0);\n\n  const data = useStaticQuery(graphql`\n    query {\n      allMdx(filter: {fileAbsolutePath: {regex: \"/projects/\"}}) {\n        edges {\n          node {\n            id\n            frontmatter {\n              order\n              title\n              github\n              image {\n                childImageSharp {\n                  gatsbyImageData\n                }\n              }\n              image_alt\n              tech\n            }\n            body\n          }\n        }\n      }\n    }\n  `);\n\n  const projectData = data.allMdx.edges;\n\n  return (\n    // Why true &&\n    <Section heading={'Projects'} {...props}>\n      {true &&\n        projectData.map((edge, i) => {\n          const { node } = edge;\n          const { frontmatter, body } = node;\n          const { order } = frontmatter;\n          return (\n            <Project\n              key={i}\n              id={order}\n              totalProjects={projectData.length}\n              data={{ ...frontmatter, body }}\n              current={currentProject}\n              setCurrent={setCurrentProject}\n              increment={increment}\n              setIncrement={setIncrement}\n            />\n          )\n        })}\n    </Section>\n  )\n}\n\nexport default Projects;","import React from 'react';\nimport styled from '@emotion/styled';\n\nimport { MDXRenderer } from 'gatsby-plugin-mdx'\nimport { useStaticQuery, graphql } from \"gatsby\";\n\nimport { Section }  from  '@templates';\nimport { contactDetails } from \"@config\";\n\nconst ContactContent = styled.div`\n\n  display: grid;\n  justify-items: center;\n\n  .contact-heading {\n    font-size: clamp(20px, 12vw, 50px);\n  }\n\n  .contact-text {\n    width: 320px;\n    font-size: var(--fz-xl);\n    color: var(--text2);\n    text-align: center;\n  }\n\n  .contact-button {\n    width: 140px;\n    height: 60px;\n    margin: 20px;\n  }\n\n`;\n\nconst Contact = (props) => {\n\n  const data = useStaticQuery(graphql`\n    query {\n      allMdx( filter: {fileAbsolutePath: {regex: \"/contact/\"}} ) {\n        nodes {\n          id\n          frontmatter {\n            heading\n          }\n          body\n        }\n      }\n    }\n  `);\n\n  const { frontmatter, body } = data.allMdx.nodes[0];\n  const { heading } = frontmatter;\n\n  const mailLink = React.useRef('');\n\n  const handleContactClicked = () => {\n    mailLink.current = `mailto:${atob(contactDetails.email)}?subject=${atob(contactDetails.subject)}` || '';\n    window.location.href = mailLink.current;\n  }\n\n  return (\n    <Section {...props}>\n      <ContactContent>\n        <h1 className='contact-heading'>{heading}</h1>\n        <div className='contact-text'>\n          <MDXRenderer> \n            {body} \n          </MDXRenderer>\n        </div>\n        <button\n          className='smallButton contact-button'\n          onClick={handleContactClicked}\n          >\n          Say Hello\n        </button>\n      </ContactContent>\n    </Section>\n  )\n}\n\nexport default Contact;\n","import React, { useEffect } from \"react\";\n\nimport styled from '@emotion/styled';\nimport { resumeFileID } from \"@config\";\n\nconst StyledButton = styled.a`\n  animation: ${props => props.animation || 'none' } 1000ms ease both;\n`;\n\nconst ResumeButton = ( { current, visible, setVisible } ) => {\n\n  const [mounted, setMounted] = React.useState(false);\n\n  useEffect(() => {\n    if ( current === 0 ) return setVisible(false);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [current]);\n\n  useEffect(() => {\n    if ( visible ) return setMounted(true);\n  }, [visible]);\n\n  const handleClick = () => {\n\n  };\n\n  const getAnimation = () => {\n    if ( mounted && visible ) return 'fadeInUp';\n    if ( mounted && !visible ) return 'fadeOutDown';\n    return 'none';\n  }\n\n  const handleAnimationEnd = (props) => {\n    if ( current === 0 ) {\n      setMounted(false);\n      setVisible(false);\n    }\n  }\n\n  return (\n    <>\n      { \n        mounted &&\n        <StyledButton \n          className='smallButton resume-button' \n          href={`https://docs.google.com/uc?export=download&id=${resumeFileID}`}\n          animation={getAnimation} \n          onAnimationEnd={handleAnimationEnd}\n          onClick={handleClick}\n        >\n          Download CV\n        </StyledButton>\n      }\n    </>\n  );\n};\n\nexport default ResumeButton;","import React, { useRef } from 'react';\nimport { Layout, Header, Home, About, Experience, Projects, Contact } from '@components';\n\nconst DesktopSite = () => {\n  const [currentSection, setCurrentSection] = React.useState(0);\n  const next = useRef(currentSection);\n  const [increment, setIncrement] = React.useState(0);\n  \n  const sectionProps = {\n    current: currentSection,\n    setCurrent: setCurrentSection,\n    next: next,\n    increment: increment,\n    setIncrement: setIncrement\n  };\n\n  return (\n    <Layout current={currentSection}>\n      <Header current={currentSection} setIncrement={setIncrement} />\n      <Home id={0} {...sectionProps} />\n      <About id={1} {...sectionProps} />\n      <Experience id={2} {...sectionProps} />\n      <Projects id={3} {...sectionProps} />\n      <Contact id={4} {...sectionProps} />\n    </Layout>\n  );\n}\n\nexport default DesktopSite;"],"names":["N","height","HTMLImageElement","prototype","W","e","t","a","Boolean","images","fallback","src","gatsbyImageData","gatsbyImage","childImageSharp","j","i","r","u","loading","shouldLoad","style","opacity","O","n","s","o","l","backgroundColor","width","position","top","left","bottom","right","objectFit","objectPosition","d","transition","z","D","_ref5","layout","paddingTop","maxWidth","display","alt","role","A","children","c","q","P","H","srcSet","decoding","G","sources","sizes","length","map","_ref6","media","type","key","V","propTypes","isRequired","displayName","B","F","Error","U","Y","_len","arguments","Array","_key","h","apply","concat","X","image","J","Z","K","Set","Q","ee","te","as","className","class","g","onStartLoad","p","onLoad","m","onError","f","w","y","b","v","E","M","k","S","$","I","JSON","stringify","x","then","_ref7","renderImageToString","swapPlaceholderImage","current","querySelector","complete","wasCached","setTimeout","removeAttribute","addEventListener","removeEventListener","add","has","_ref8","innerHTML","isLoading","isLoaded","requestAnimationFrame","cancelAnimationFrame","ref","dangerouslySetInnerHTML","__html","suppressHydrationWarning","ae","ie","re","_len2","_key2","ne","se","oe","__imageData","__error","console","warn","camelCase","input","options","isArray","TypeError","Object","assign","pascalCase","trim","filter","join","toUpperCase","toLowerCase","string","isLastCharLower","isLastCharUpper","isLastLastCharUpper","character","test","slice","preserveCamelCase","replace","_","p1","charAt","module","exports","element","scrollDirection","setScrollDirection","React","scrollEnabled","useRef","useEffect","deltaY","disableScroll","Math","sign","enableScroll","useDeviceDetect","isMobile","setMobile","undefined","userAgent","window","navigator","mobile","match","_ref","___EmotionJSX","id","ThemeProvider","StyledHeader","_styled","target","name","styles","props","Nav","StyledNav","StyledLinkButton","active","HomeButton","setIncrement","setActive","showResumeButton","setShowResumeButton","linksRef","onTransitionEnd","onClick","handleHomeClick","navLinks","_ref2","url","handleLinkClick","clicked","ResumeButton","visible","setVisible","_objectWithoutProperties","source","excluded","hasOwnProperty","call","indexOf","getOwnPropertySymbols","sourceSymbolKeys","propertyIsEnumerable","StyledSection","animation","animations","entrance","exit","heading","setCurrent","next","increment","_excluded","setElement","setAnimation","mounted","setMounted","useScrollListener","sectionRef","useCallback","node","updateAnimation","handleEntranceAnimationEnd","handleExitAnimationEnd","onAnimationEnd","animationName","Content","sectionID","StyledImage","GatsbyImage","getImage","StyledDiv","StyledContent","Section","AboutContent","data","useStaticQuery","frontmatter","body","allMdx","nodes","_extends","MDXRenderer","SkillListItem","transitionDelay","grow","keyframes","skill","ExperienceContent","skills","tools","skillsJson","fromEntries","split","entries","SkillBar","Image","IconGitHub","xmlns","viewBox","fill","stroke","strokeWidth","strokeLinecap","strokeLinejoin","StyledProject","totalProjects","title","github","imageAlt","tech","getAnimation","unmount","prev","href","rel","currentProject","setCurrentProject","projectData","edges","edge","order","Project","_objectSpread","ContactContent","mailLink","handleContactClicked","atob","contactDetails","email","subject","location","StyledButton","resumeFileID","handleClick","DesktopSite","currentSection","setCurrentSection","sectionProps","Layout","Header","Home","About","Experience","Projects","Contact"],"sourceRoot":""}